# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# POMA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with POMA. If not, see <https://www.gnu.org/licenses/>.
# data <- params$n
# target <- params$t
data <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T, sep = "\t")
colnames(target) <- c("Sample", "Treatment", "Batch")
prot_names <- data$Accession
remove <- ncol(data) - nrow(target)
data <- data[, -c(1:remove)]
counts <- apply(data, 2, function(x) as.numeric(as.character(x)))
data <- data.frame(t(data))
colnames(data) <- prot_names
zeros <- data[, -which(colSums(data) != 0)]
data <- data[, which(colSums(data) != 0)]
nas <- sapply(data, function(x) sum(is.na(x)))
nas <- data.frame(number = nas[nas != 0])
nas$names <- rownames(nas)
if (nrow(nas) >= 1){
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite", yaxis = list(title = "Missing Values"), xaxis = list(title = ""))
}
library(ggplot2)
library(plotly)
library(reshape)
counts <- data.frame(table(target$Treatment))
colnames(counts) <- c("Group", "Counts")
counts%>%
plot_ly(x=~Group, y= ~Counts, color= ~Group, legendgroup=~Group, type = "bar", opacity = 0.7) %>%
layout(title = "Counts by Group", y = "Counts", x = "Group")
# This file is part of POMA.
# POMA is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# POMA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with POMA. If not, see <https://www.gnu.org/licenses/>.
# data <- params$n
# target <- params$t
data <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T, sep = "\t")
colnames(target) <- c("Sample", "Group", "Batch")
prot_names <- data$Accession
remove <- ncol(data) - nrow(target)
data <- data[, -c(1:remove)]
counts <- apply(data, 2, function(x) as.numeric(as.character(x)))
data <- data.frame(t(data))
colnames(data) <- prot_names
zeros <- data[, -which(colSums(data) != 0)]
data <- data[, which(colSums(data) != 0)]
nas <- sapply(data, function(x) sum(is.na(x)))
nas <- data.frame(number = nas[nas != 0])
nas$names <- rownames(nas)
if (nrow(nas) >= 1){
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite", yaxis = list(title = "Missing Values"), xaxis = list(title = ""))
}
library(ggplot2)
library(plotly)
library(reshape)
counts <- data.frame(table(target$Group))
colnames(counts) <- c("Group", "Counts")
counts%>%
plot_ly(x=~Group, y= ~Counts, color= ~Group, legendgroup=~Group, type = "bar", opacity = 0.7) %>%
layout(title = "Counts by Group", y = "Counts", x = "Group")
dataX <- cbind(target$Group, data)
data2 <- melt(as.data.frame(dataX))
data2 %>%
group_by(Group)%>%
plot_ly(x=~variable, y= ~value, color= ~Group, legendgroup=~Group, type = "box") %>%
layout(title = "Boxplot of all metabolites", y = "Concentration")
dataX <- cbind(target$Group, data)
data2 <- melt(as.data.frame(dataX))
View(data2)
dataX <- cbind(Group = target$Group, data)
data2 <- melt(as.data.frame(dataX))
data2 <- melt(as.data.frame(dataX))
data2 %>%
group_by(Group)%>%
plot_ly(x=~variable, y= ~value, color= ~Group, legendgroup=~Group, type = "box") %>%
layout(title = "Boxplot of all metabolites", y = "Concentration")
shiny::runApp()
View(dataX)
normality <- data.frame(pval = apply(data,2, function(x) {shapiro.test(x)$p.value}))
normality$pval <- p.adjust(normality$pval, method = "fdr")
percent.norm <- round((length(normality[normality$pval > 0.05,])/nrow(normality))*100,3)
normality$names <- rownames(normality)
names.normality <- normality[normality$pval > 0.05,2]
##
homo <- data.frame(pval=apply(dataX,2,function(x) {bartlett.test(x, dataX$Group)$p.value}))
homo$pval <- p.adjust(homo$pval, method = "fdr")
percent.homo <- round((length(homo[homo$pval > 0.05,])/nrow(homo))*100,3)
homo$names <- rownames(homo)
names.homo <- homo[homo$pval > 0.05,2]
normality
runApp()
runApp()
ggplot(counts, aes(Group, Counts)) +
geom_bar()
library(ggplot2)
ggplot(counts, aes(Group, Counts)) +
geom_bar()
View(counts)
ggplot(counts, aes(Group, Counts)) +
geom_bar(stat = "count")
ggplot(counts, aes(Group)) +
geom_bar(stat = "count")
ggplot(counts, aes(Counts)) +
geom_bar(stat = "count")
ggplot(counts, aes(Group)) +
geom_bar()
ggplot(counts, aes(Group)) +
geom_bar() +
theme_minimal()
ggplot(counts, aes(Group)) +
geom_bar(stat = "Identity") +
theme_minimal()
ggplot(counts, aes(Group, Counts)) +
geom_bar(stat="identity")
ggplot(counts, aes(Group, Counts, color = Groups)) +
geom_bar(stat="identity") +
theme_minimal()
ggplot(counts, aes(Group, Counts, color = Group)) +
geom_bar(stat="identity") +
theme_minimal()
ggplot(counts, aes(Group, Counts, fill = Group)) +
geom_bar(stat="identity") +
theme_minimal()
shiny::runApp()
View(nas)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
batch.neutralize()
batch.neutralize
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
target <- read.table("Desktop/Sample.txt", header = T) %>%
column_to_rownames("Sample")
proteines <- read.table("Desktop/Counts.txt", sep = "\t", header = T)
proteines <- proteines %>%
column_to_rownames("Accession")
target <- read.table("/Users/pol/Desktop/Sample.txt", header = T) %>%
column_to_rownames("Sample")
proteines <- read.table("/Users/pol/Desktop/Counts.txt", sep = "\t", header = T)
proteines <- proteines %>%
column_to_rownames("Accession")
proteines <- proteines[, colnames(proteines) %in% rownames(target)]
target <- read.table("/Users/pol/Desktop/Sample.txt", header = T) %>%
column_to_rownames("Sample")
proteines <- read.table("/Users/pol/Desktop/Counts.txt", sep = "\t", header = T)
proteines <- proteines %>%
column_to_rownames("Accession")
proteines <- proteines[, colnames(proteines) %in% rownames(target)]
data <- MSnbase::MSnSet(exprs = as.matrix(proteines), pData = target)
e <- pp.msms.data(data)
library(msmsEDA)
e <- pp.msms.data(data)
counts <- Biobase::exprs(e)
tcnts <- apply(counts, 2, sum)
medt <- median(tcnts)
div <- data.frame(median = tcnts/medt)
div$sample <- rownames(div)
div$Group <- target$Treatment
ggplot(div, aes(x = sample, y = median, fill = Group)) +
geom_bar(stat="identity")+
theme_minimal() +
xlab("") +
geom_hline(yintercept = 1, linetype = "dashed") +
scale_fill_brewer(palette = "Dark2") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top")
library(MSnbase)
counts <- Biobase::exprs(e)
neutralized <- batch_neutralize(counts, target$Batch, half = TRUE, sqrt.trans = TRUE)
View(neutralized)
e <- Barplot()$e
counts <- Biobase::exprs(e)
target <- pData(e)
neutralized <- batch_neutralize(counts, target$Batch, half = TRUE, sqrt.trans = TRUE)
View(neutralized)
boxplot(neutralized)
boxplot(log2(neutralized))
neutralized <- batch.neutralize(counts, target$Batch, half = TRUE, sqrt.trans = TRUE)
boxplot(neutralized)
spc.boxplots(exprs(e),fact = pData(e)$Treatment, minSpC=2)
spc.boxplots(exprs(e),fact = pData(e)$Treatment, minSpC=3)
?spc.boxplots
spc.boxplots(exprs(e),fact = pData(e)$Treatment, minSpC=0)
ggplot(stack(e), aes(x = ind, y = values)) +
geom_boxplot()
ggplot(stack(counts), aes(x = ind, y = values)) +
geom_boxplot()
counts <- t(Biobase::exprs(e))
ggplot(stack(counts), aes(x = ind, y = values)) +
geom_boxplot()
View(counts)
counts <- Biobase::exprs(e)
target <- pData(e)
ggplot(stack(counts), aes(x = ind, y = values)) +
geom_boxplot()
stack(counts)
library(reshape2)
counts2 <- reshape2::melt(counts)
View(counts2)
ggplot(counts2, aes(Var2, log2(value), color = target$Treatment)) +
geom_jitter() +
geom_boxplot(color = "black", outlier.colour = NA) +
theme(legend.position = "none") +
theme_minimal() +
xlab("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top") +
scale_color_brewer(palette = "Dark2")
ggplot(counts2, aes(Var2, log2(value))) +
geom_jitter() +
geom_boxplot(color = "black", outlier.colour = NA) +
theme(legend.position = "none") +
theme_minimal() +
xlab("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top") +
scale_color_brewer(palette = "Dark2")
neutralized <- batch.neutralize(e, target$Batch, half = TRUE, sqrt.trans = TRUE)
neutralized <- batch.neutralize(counts, target$Batch, half = TRUE, sqrt.trans = TRUE)
neutralized
spc.boxplots(exprs(e), fact = pData(e)$Treatment, minSpC = 2)
runApp()
return(list(normplot = normplot))
counts <- Biobase::exprs(e)
target <- pData(e)
neutralized <- batch.neutralize(counts, target$Batch, half = TRUE, sqrt.trans = TRUE)
spc.boxplots
View(neutralized)
total <- t(exprs(e))
View(total)
total <- cbind(target[, 1:2], total)
normtable_subjects <- total %>% reshape2::melt()
normplot <- normtable_subjects %>%
ggplot(aes(Sample, log2(value), color = Group)) +
geom_jitter() +
geom_boxplot(color = "black", outlier.colour = NA) +
theme(legend.position = "none") +
theme_minimal() +
xlab("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top") +
scale_color_brewer(palette = "Dark2")
normplot
View(normtable_subjects)
total <- cbind(Sample = rownames(target), target$Treatment, total)
normtable_subjects <- total %>% reshape2::melt()
normplot <- normtable_subjects %>%
ggplot(aes(Sample, log2(value), color = Group)) +
geom_jitter() +
geom_boxplot(color = "black", outlier.colour = NA) +
theme(legend.position = "none") +
theme_minimal() +
xlab("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top") +
scale_color_brewer(palette = "Dark2")
normplot
normplot <- normtable_subjects %>%
ggplot(aes(Sample, log2(value), color = Treatment)) +
geom_jitter() +
geom_boxplot(color = "black", outlier.colour = NA) +
theme(legend.position = "none") +
theme_minimal() +
xlab("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top") +
scale_color_brewer(palette = "Dark2")
normplot
normtable_subjects <- total %>% reshape2::melt()
runApp()
total <- cbind(Sample = rownames(target), target$Treatment, total)
counts <- Biobase::exprs(e)
target <- pData(e)
###
# spc.boxplots(exprs(e),fact = pData(e)$Treatment, minSpC=0)
neutralized <- batch.neutralize(counts, target$Batch, half = TRUE, sqrt.trans = TRUE)
###
total <- t(exprs(e))
total <- cbind(Sample = rownames(target), Treatment = target$Treatment, total)
counts <- Biobase::exprs(e)
target <- pData(e)
###
# spc.boxplots(exprs(e),fact = pData(e)$Treatment, minSpC=0)
# neutralized <- batch.neutralize(counts, target$Batch, half = TRUE, sqrt.trans = TRUE)
###
total <- t(exprs(e))
total <- cbind(Sample = rownames(target), Treatment = target$Treatment, total)
# counts <- Biobase::exprs(e)
target <- pData(e)
total <- t(exprs(e))
total <- cbind(Sample = rownames(target), Treatment = target$Treatment, total)
View(total)
normtable_subjects <- total %>% reshape2::melt() %>%
filter(value >= 0)
normtable_subjects <- total %>% reshape2::melt()
View(normtable_subjects)
total <- cbind(Sample = rownames(target), Treatment = target$Treatment, total)
# counts <- Biobase::exprs(e)
target <- pData(e)
###
# spc.boxplots(exprs(e),fact = pData(e)$Treatment, minSpC=0)
# neutralized <- batch.neutralize(counts, target$Batch, half = TRUE, sqrt.trans = TRUE)
###
total <- t(exprs(e))
total <- cbind(Sample = rownames(target), Treatment = target$Treatment, total)
normtable_subjects <- total %>% reshape2::melt()
View(normtable_subjects)
total <- t(exprs(e))
total <- cbind(Treatment = target$Treatment, total)
normtable_subjects <- total %>% reshape2::melt()
total <- t(exprs(e))
total <- cbind(Sample = rownames(target), Treatment = target$Treatment, total)
total <- gather(total)
total <- t(exprs(e))
total <- gather(total)
# counts <- Biobase::exprs(e)
target <- pData(e)
###
# spc.boxplots(exprs(e),fact = pData(e)$Treatment, minSpC=0)
# neutralized <- batch.neutralize(counts, target$Batch, half = TRUE, sqrt.trans = TRUE)
###
total <- t(exprs(e))
total <- cbind(Sample = rownames(target), Treatment = target$Treatment, total)
total <- t(exprs(e))
stack(total)
target <- pData(e)
###
# spc.boxplots(exprs(e),fact = pData(e)$Treatment, minSpC=0)
# neutralized <- batch.neutralize(counts, target$Batch, half = TRUE, sqrt.trans = TRUE)
###
total <- t(exprs(e))
total <- cbind(Sample = rownames(target), Treatment = target$Treatment, total)
normtable_subjects <- total %>% reshape2::melt(id.vars = c("Sample", "Treatment"))
target <- pData(e)
###
# spc.boxplots(exprs(e),fact = pData(e)$Treatment, minSpC=0)
# neutralized <- batch.neutralize(counts, target$Batch, half = TRUE, sqrt.trans = TRUE)
###
total <- t(exprs(e))
total <- cbind(Sample = rownames(target), Treatment = target$Treatment, total)
total <- cbind(Treatment = target$Treatment, total)
total <- t(exprs(e))
total <- cbind(Treatment = target$Treatment, total)
normtable_subjects <- total %>% reshape2::melt(id.vars = "Treatment")
normtable_subjects <- total %>% reshape2::melt() %>%
filter(value >= input$minSpC)
total <- t(exprs(e))
total <- cbind(Treatment = target$Treatment, total)
### NORMALIZATION
normtable_subjects <- total %>% reshape2::melt()
total <- t(exprs(e))
total <- cbind(Treatment = target$Treatment, total)
pivot_longer(total, -Treatment)
total %>% pivot_longer(-Treatment)
total %>% pivot_longer(-Treatment, names_to = "income", values_to = "count")
total %>% pivot_longer(cols = -Treatment, names_to = "income", values_to = "count")
target <- pData(e)
###
# spc.boxplots(exprs(e),fact = pData(e)$Treatment, minSpC=0)
# neutralized <- batch.neutralize(counts, target$Batch, half = TRUE, sqrt.trans = TRUE)
###
total <- t(exprs(e))
total <- cbind(Treatment = target$Treatment, total)
neutralized <- batch.neutralize(exprs(e), target$Batch, half = TRUE, sqrt.trans = TRUE)
neutralized <- batch.neutralize(exprs(e), target$Batch, half = TRUE, sqrt.trans = TRUE)
total <- as.data.frame(t(neutralized))
total <- cbind(Sample = rownames(target), Treatment = target$Treatment, total)
neutralized <- batch.neutralize(exprs(e), target$Batch, half = TRUE, sqrt.trans = TRUE)
total <- as.data.frame(t(neutralized))
total <- cbind(Sample = rownames(target), Treatment = target$Treatment, total)
normtable_subjects <- total %>% reshape2::melt()
normtable_subjects %>%
ggplot(aes(Sample, log2(value), color = Treatment)) +
geom_jitter() +
geom_boxplot(color = "black", outlier.colour = NA) +
theme(legend.position = "none") +
theme_minimal() +
xlab("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top") +
scale_color_brewer(palette = "Dark2")
total <- as.data.frame(t(exprs(e)))
total <- cbind(Sample = rownames(target), Treatment = target$Treatment, total)
normtable_subjects <- total %>% reshape2::melt() %>%
filter(value >= input$minSpC)
normtable_subjects <- total %>% reshape2::melt()
normplot1 <- normtable_subjects %>%
ggplot(aes(Sample, log2(value), color = Treatment)) +
geom_jitter() +
geom_boxplot(color = "black", outlier.colour = NA) +
theme(legend.position = "none") +
theme_minimal() +
xlab("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top") +
scale_color_brewer(palette = "Dark2")
normplot1
target <- pData(e)
###
total <- as.data.frame(t(exprs(e)))
total <- cbind(Sample = rownames(target), Treatment = target$Treatment, total)
### NOT NORMALIZED
normtable_subjects <- total %>% reshape2::melt() %>%
filter(value >= input$minSpC)
normplot1 <- normtable_subjects %>%
ggplot(aes(Sample, log2(value), color = Treatment)) +
geom_jitter() +
geom_boxplot(color = "black", outlier.colour = NA) +
theme(legend.position = "none") +
theme_minimal() +
xlab("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top") +
scale_color_brewer(palette = "Dark2")
#### NORMALIZED
neutralized <- batch.neutralize(exprs(e), target$Batch, half = TRUE, sqrt.trans = TRUE)
total <- as.data.frame(t(neutralized))
total <- cbind(Sample = rownames(target), Treatment = target$Treatment, total)
normtable_subjects <- total %>% reshape2::melt() %>%
filter(value >= input$minSpC)
normplot2 <- normtable_subjects %>%
ggplot(aes(Sample, log2(value), color = Treatment)) +
geom_jitter() +
geom_boxplot(color = "black", outlier.colour = NA) +
theme(legend.position = "none") +
theme_minimal() +
xlab("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
scale_color_brewer(palette = "Dark2")
normplot <- ggpubr::ggarrange(normplot1, normplot2,
labels = c("Not Normalized", "Normalized"),
ncol = 1, nrow = 2)
normplot
runApp()
?plotOutput
install.packages('patchwork')
library(patchwork)
normplot <- normplot1/normplot2
normplot
class(normplot)
runApp()
runApp()
runApp()
data2 <- MSnSet(exprs = neutralized, pData = pData(e))
total <- exprs(data2)
target <- pData(data2)
my_group <- as.numeric(as.factor(target$Treatment))
colSide <- brewer.pal(8, "Dark2")[my_group]
colMain <- colorRampPalette( c("green", "black", "red"), space = "rgb")(64)
heatmap(total, ColSideColors = colSide, col = colMain, labRow = NA)
total <- exprs(e)
target <- pData(e)
my_group <- as.numeric(as.factor(target$Treatment))
colSide <- brewer.pal(8, "Dark2")[my_group]
colMain <- colorRampPalette( c("green", "black", "red"), space = "rgb")(64)
heatmap(total, ColSideColors = colSide, col = colMain, labRow = NA)
res_pca1 <- mixOmics::pca(neutralized)
res_pca <- cbind(pData(e), res_pca1$x)
res_pca1 <- mixOmics::pca(t(neutralized))
res_pca <- cbind(pData(e), res_pca1$x)
View(res_pca)
runApp()
runApp()
runApp()
View(res_pca)
runApp()
runApp()
runApp()
spc.scatterplot
data2 <- MSnSet(exprs = neutralized, pData = pData(e))
dend1 <- counts.hc(data2, facs = pData(data2)[, "Treatment", drop = FALSE])
dend2 <- counts.hc(data2, facs = pData(data2)[, "Batch", drop = FALSE])
runApp()
runApp()
runApp()
