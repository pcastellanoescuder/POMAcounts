shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
BiocManager::install("msmsEDA")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?fileInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plotOutput
runApp()
?radioButtons
runApp()
runApp()
runApp()
runApp()
?numericInput
runApp()
runApp()
?fluidPage
?plotOutput
runApp()
runApp()
?heatmap
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt")
data <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", sep = "\t")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", sep = "\t")
data <- data.frame(t(data))
View(data)
data <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T, sep = "\t")
data <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T, sep = "\t")
View(data)
View(target)
data <- data.frame(t(data))
data <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T, sep = "\t")
data <- data.frame(t(data))
data <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
data <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T, sep = "\t")
prot_names <- proteines$Accession
prot_names <- data$Accession
remove <- ncol(data) - nrow(target)
remove
data <- data[, -c(1:remove)]
counts <- apply(data, 2, function(x) as.numeric(as.character(x)))
data <- data.frame(t(data))
colnames(data) <- prot_names
zeros <- data[, -which(colSums(data) != 0)]
data <- data[, which(colSums(data) != 0)]
data <- cbind(target, data)
nas <- sapply(data, function(x) sum(is.na(x)))
nas <- data.frame(number = nas[nas != 0])
nas$names <- rownames(nas)
data <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T, sep = "\t")
prot_names <- data$Accession
remove <- ncol(data) - nrow(target)
data <- data[, -c(1:remove)]
counts <- apply(data, 2, function(x) as.numeric(as.character(x)))
data <- data.frame(t(data))
colnames(data) <- prot_names
zeros <- data[, -which(colSums(data) != 0)]
data <- data[, which(colSums(data) != 0)]
nas <- sapply(data, function(x) sum(is.na(x)))
nas <- data.frame(number = nas[nas != 0])
nas$names <- rownames(nas)
colnames(target) <- c("Sample", "Treatment", "Batch")
# This file is part of POMA.
# POMA is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# POMA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with POMA. If not, see <https://www.gnu.org/licenses/>.
# data <- params$n
# target <- params$t
data <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T, sep = "\t")
colnames(target) <- c("Sample", "Treatment", "Batch")
prot_names <- data$Accession
remove <- ncol(data) - nrow(target)
data <- data[, -c(1:remove)]
counts <- apply(data, 2, function(x) as.numeric(as.character(x)))
data <- data.frame(t(data))
colnames(data) <- prot_names
zeros <- data[, -which(colSums(data) != 0)]
data <- data[, which(colSums(data) != 0)]
nas <- sapply(data, function(x) sum(is.na(x)))
nas <- data.frame(number = nas[nas != 0])
nas$names <- rownames(nas)
if (nrow(nas) >= 1){
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite", yaxis = list(title = "Missing Values"), xaxis = list(title = ""))
}
library(ggplot2)
library(plotly)
library(reshape)
counts <- data.frame(table(target$Treatment))
colnames(counts) <- c("Group", "Counts")
counts%>%
plot_ly(x=~Group, y= ~Counts, color= ~Group, legendgroup=~Group, type = "bar", opacity = 0.7) %>%
layout(title = "Counts by Group", y = "Counts", x = "Group")
# This file is part of POMA.
# POMA is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# POMA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with POMA. If not, see <https://www.gnu.org/licenses/>.
# data <- params$n
# target <- params$t
data <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T, sep = "\t")
colnames(target) <- c("Sample", "Group", "Batch")
prot_names <- data$Accession
remove <- ncol(data) - nrow(target)
data <- data[, -c(1:remove)]
counts <- apply(data, 2, function(x) as.numeric(as.character(x)))
data <- data.frame(t(data))
colnames(data) <- prot_names
zeros <- data[, -which(colSums(data) != 0)]
data <- data[, which(colSums(data) != 0)]
nas <- sapply(data, function(x) sum(is.na(x)))
nas <- data.frame(number = nas[nas != 0])
nas$names <- rownames(nas)
if (nrow(nas) >= 1){
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite", yaxis = list(title = "Missing Values"), xaxis = list(title = ""))
}
library(ggplot2)
library(plotly)
library(reshape)
counts <- data.frame(table(target$Group))
colnames(counts) <- c("Group", "Counts")
counts%>%
plot_ly(x=~Group, y= ~Counts, color= ~Group, legendgroup=~Group, type = "bar", opacity = 0.7) %>%
layout(title = "Counts by Group", y = "Counts", x = "Group")
dataX <- cbind(target$Group, data)
data2 <- melt(as.data.frame(dataX))
data2 %>%
group_by(Group)%>%
plot_ly(x=~variable, y= ~value, color= ~Group, legendgroup=~Group, type = "box") %>%
layout(title = "Boxplot of all metabolites", y = "Concentration")
dataX <- cbind(target$Group, data)
data2 <- melt(as.data.frame(dataX))
View(data2)
dataX <- cbind(Group = target$Group, data)
data2 <- melt(as.data.frame(dataX))
data2 <- melt(as.data.frame(dataX))
data2 %>%
group_by(Group)%>%
plot_ly(x=~variable, y= ~value, color= ~Group, legendgroup=~Group, type = "box") %>%
layout(title = "Boxplot of all metabolites", y = "Concentration")
shiny::runApp()
View(dataX)
normality <- data.frame(pval = apply(data,2, function(x) {shapiro.test(x)$p.value}))
normality$pval <- p.adjust(normality$pval, method = "fdr")
percent.norm <- round((length(normality[normality$pval > 0.05,])/nrow(normality))*100,3)
normality$names <- rownames(normality)
names.normality <- normality[normality$pval > 0.05,2]
##
homo <- data.frame(pval=apply(dataX,2,function(x) {bartlett.test(x, dataX$Group)$p.value}))
homo$pval <- p.adjust(homo$pval, method = "fdr")
percent.homo <- round((length(homo[homo$pval > 0.05,])/nrow(homo))*100,3)
homo$names <- rownames(homo)
names.homo <- homo[homo$pval > 0.05,2]
normality
runApp()
runApp()
ggplot(counts, aes(Group, Counts)) +
geom_bar()
library(ggplot2)
ggplot(counts, aes(Group, Counts)) +
geom_bar()
View(counts)
ggplot(counts, aes(Group, Counts)) +
geom_bar(stat = "count")
ggplot(counts, aes(Group)) +
geom_bar(stat = "count")
ggplot(counts, aes(Counts)) +
geom_bar(stat = "count")
ggplot(counts, aes(Group)) +
geom_bar()
ggplot(counts, aes(Group)) +
geom_bar() +
theme_minimal()
ggplot(counts, aes(Group)) +
geom_bar(stat = "Identity") +
theme_minimal()
ggplot(counts, aes(Group, Counts)) +
geom_bar(stat="identity")
ggplot(counts, aes(Group, Counts, color = Groups)) +
geom_bar(stat="identity") +
theme_minimal()
ggplot(counts, aes(Group, Counts, color = Group)) +
geom_bar(stat="identity") +
theme_minimal()
ggplot(counts, aes(Group, Counts, fill = Group)) +
geom_bar(stat="identity") +
theme_minimal()
shiny::runApp()
View(nas)
