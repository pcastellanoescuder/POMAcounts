### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Poisson GLM
pois_res <- msms.glm.pois(corrected, alt_f, null_f, div = div)
pois_res$p.adjust <- p.adjust(pois_res$p.value, method = "BH")
?selectInput
?p.adjust
runApp()
### Null and alternative model
null_f <- "y ~ Batch"
alt_f <- "y ~ Treatment + Batch"
### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Poisson GLM
pois_res <- msms.glm.pois(corrected, alt_f, null_f, div = div)
pois_res$p.adjust <- p.adjust(pois_res$p.value, method = input$adjustment_method_poisson)
?updateSelectInput
x <- names(pData(corrected))
x
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?textInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
?msms.edgeR
runApp()
runApp()
library(plotly)
# Data: volcano is provided by plotly
# Plot
p <- plot_ly(z = volcano, type = "surface")
p
volcano
?volcano
POMA::PomaVolcano
runApp()
### Null and alternative model
null_f <- "y ~ 1"
alt_f <- paste0("y ~ ", input$h1_1)
alt_f <- "y~Treatment"
### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Poisson GLM
pois_res <- msms.glm.pois(corrected, alt_f, null_f, div = div)
pois_res$p.adjust <- p.adjust(pois_res$p.value, method = input$adjustment_method_poisson)
pois_res$p.adjust <- p.adjust(pois_res$p.value, method = "BH")
pval <- "raw"
data <- pois_res
names <- rownames(data)
names
df <- pois_res
names <- rownames(df)
log2FC <- 1.5
df <- mutate(df, threshold = as.factor(ifelse(df$pvalue >= pval_cutoff,
yes = "none",
no = ifelse(df$FC < log2(log2FC),
yes = ifelse(df$FC < -log2(log2FC),
yes = "Down-regulated",
no = "none"),
no = "Up-regulated"))))
pval_cutoff <- 0.05
df <- mutate(df, threshold = as.factor(ifelse(df$pvalue >= pval_cutoff,
yes = "none",
no = ifelse(df$FC < log2(log2FC),
yes = ifelse(df$FC < -log2(log2FC),
yes = "Down-regulated",
no = "none"),
no = "Up-regulated"))))
View(df)
pval_cutoff
df$pvalue
df$pvalue
df <- data.frame(pvalue = df$p.value, FC = df$LogFC, names = names)
df <- mutate(df, threshold = as.factor(ifelse(df$pvalue >= pval_cutoff,
yes = "none",
no = ifelse(df$FC < log2(log2FC),
yes = ifelse(df$FC < -log2(log2FC),
yes = "Down-regulated",
no = "none"),
no = "Up-regulated"))))
ggplot(data = df, aes(x = FC, y = -log10(pvalue), colour = threshold)) +
geom_point(size=1.75) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p")+
ggtitle("Comparisson: Group2/Group1") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
labs(color = "") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363"))
ggplot(data = df, aes(x = FC, y = -log10(pvalue), colour = threshold)) +
geom_point(size=1.75) +
# xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p")+
ggtitle("Comparisson: Group2/Group1") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
labs(color = "") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363"))
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), colour = threshold)) +
geom_point(size=1.75) +
# xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p")+
ggtitle("Comparisson: Group2/Group1") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
labs(color = "") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
xlim <- 5
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), colour = threshold)) +
geom_point(size=1.75) +
# xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p")+
ggtitle("Comparisson: Group2/Group1") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
labs(color = "") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), colour = threshold)) +
geom_point(size=1.75) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p")+
ggtitle("Comparisson: Group2/Group1") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
labs(color = "") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold)) +
geom_point(size=1.75) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p")+
ggtitle("Comparisson: Group2/Group1") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
labs(color = "") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
?ggplotly
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold)) +
geom_point(size=1.75) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p")+
ggtitle("Comparisson: Group2/Group1") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
labs(color = "") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")), tooltip = NULL)
plotly_example("shiny", "ggplotly_sizing")
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold)) +
geom_point(size = 1.75, alpha = 0.2) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p")+
ggtitle("Comparisson: Group2/Group1") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
labs(color = "") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold)) +
geom_point(size = 1.75, alpha = 0.8) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p")+
ggtitle("Comparisson: Group2/Group1") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
labs(color = "") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold)) +
geom_point(size = 1.75, alpha = 0.8) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
# scale_y_continuous(trans = "log1p") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
labs(color = "") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold)) +
geom_point(size = 1.75, alpha = 0.8) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
# labs(color = "") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
df <- data.frame(pvalue = df$p.value, FC = round(df$LogFC, 2), names = names)
pval, log2FC, pval_cutoff, xlim
df <- pois_res
df <- data.frame(pvalue = df$p.value, FC = round(df$LogFC, 2), names = names)
df <- mutate(df, threshold = as.factor(ifelse(df$pvalue >= pval_cutoff,
yes = "none",
no = ifelse(df$FC < log2(log2FC),
yes = ifelse(df$FC < -log2(log2FC),
yes = "Down-regulated",
no = "none"),
no = "Up-regulated"))))
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold)) +
geom_point(size = 1.75, alpha = 0.8) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
View(df)
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold, fill = names)) +
geom_point(size = 1.75, alpha = 0.8) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold, fill = names)) +
geom_point(size = 1.75, alpha = 0.8) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
scale_fill_manual() +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold, labels = names)) +
geom_point(size = 1.75, alpha = 0.8) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
runApp()
runApp()
?numericInput
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
?msms.edgeR
runApp()
runApp()
runApp()
runApp()
?msms.glm.qlll
?msms.glm.pois
runApp()
runApp()
shiny::runApp()
BiocManager::install("msmsTests")
runApp()
runApp()
runApp()
runApp()
runApp()
POMA::POPomaVolcano()
POMA::PomaVolcano
runApp()
runApp()
runApp()
?msmsEDA::spc.scatterplot
runApp()
runApp()
runApp()
scrollX = TRUE,
shiny::runApp()
runApp()
runApp()
runApp()
sqrt(2)
POMA::PomaImpute
runApp()
runApp()
?heatmap
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
exprs(st0)
proteines <- read.table("/Users/pol/Dropbox/JosepVillanueva/Counts.txt")
proteines <- read.table("/Users/pol/Dropbox/JosepVillanueva/Counts.txt", sep = "\t")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/Samples.txt", sep = "\t")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/Samples.txt")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/Sample.txt")
proteines <- read.table("/Users/pol/Dropbox/JosepVillanueva/Counts.txt", sep = "\t")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/Sample.txt")
colnames(target) <- c("Sample", "Treatment", "Batch")
colnames(proteines)[2] <- "Accession"
target <- column_to_rownames(target, "Sample")
proteines <- column_to_rownames(proteines, "Accession")
proteines <- proteines[, colnames(proteines) %in% rownames(target)]
data <- MSnbase::MSnSet(exprs = as.matrix(proteines), pData = target)
View(proteines)
proteines <- read.table("/Users/pol/Dropbox/JosepVillanueva/Counts.txt", sep = "\t")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/Sample.txt")
proteines <- read.table("/Users/pol/Dropbox/JosepVillanueva/Counts.txt", header = T, sep = "\t")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/Sample.txt", header = T)
colnames(target) <- c("Sample", "Treatment", "Batch")
colnames(proteines)[2] <- "Accession"
target <- column_to_rownames(target, "Sample")
proteines <- column_to_rownames(proteines, "Accession")
proteines <- proteines[, colnames(proteines) %in% rownames(target)]
data <- MSnbase::MSnSet(exprs = as.matrix(proteines), pData = target)
raw <- pp.msms.data(data)
counts <- Biobase::exprs(raw)
tcnts <- apply(counts, 2, sum)
medt <- median(tcnts)
div <- data.frame(median = tcnts/medt)
div$sample <- rownames(div)
div$Treatment <- target$Treatment
counts <- Biobase::exprs(raw)
tspc <- apply(counts, 2, sum)
div <- tspc/median(tspc)
norm <- norm.counts(raw, div)
counts <- Biobase::exprs(norm)
tcnts <- apply(counts, 2, sum)
medt <- median(tcnts)
div <- data.frame(median = tcnts/medt)
div$sample <- rownames(div)
div$Treatment <- target$Treatment
target <- pData(norm)
neutralized <- batch.neutralize(exprs(norm), target$Batch, half = TRUE, sqrt.trans = TRUE)
corrected <- MSnSet(exprs = as.matrix(neutralized), pData = pData(norm))
target <- pData(corrected)
### Null and alternative model
null_f <- "y ~ 1"
alt_f <- "y~Treatment"
### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Poisson GLM
pois_res <- msms.glm.pois(corrected, alt_f, null_f, div = div)
pois_res$p.adjust <- p.adjust(pois_res$p.value, method = "fdr")
pois_res_names <- rownames(pois_res)[pois_res$p.adjust < 0.05 ,]
View(pois_res)
pois_res$p.adjust < 0.05
pois_res_names <- pois_res[pois_res$p.adjust < 0.05 ,]
pois_res_names <- rownames(pois_res[pois_res$p.adjust < 0.05 ,])
pois_res_names
total <- exprs(corrected)
total <- total[rownames(total) %in% pois_res_names]
target <- pData(corrected)
my_group <- as.numeric(as.factor(target$Treatment))
colSide <- brewer.pal(8, "Dark2")[my_group]
colMain <- colorRampPalette( c("green", "black", "red"), space = "rgb")(64)
heatmap(t(scale(t(total))), ColSideColors = colSide, col = colMain, labRow = NA)
total <- total[rownames(total) %in% pois_res_names ,]
target <- pData(corrected)
my_group <- as.numeric(as.factor(target$Treatment))
total <- exprs(corrected)
total <- total[rownames(total) %in% pois_res_names]
total
total <- exprs(corrected)
total <- total[rownames(total) %in% pois_res_names ,]
target <- pData(corrected)
my_group <- as.numeric(as.factor(target$Treatment))
colSide <- brewer.pal(8, "Dark2")[my_group]
colMain <- colorRampPalette( c("green", "black", "red"), space = "rgb")(64)
heatmap(t(scale(t(total))), ColSideColors = colSide, col = colMain, labRow = NA)
pois_res_names <- rownames(pois_res[pois_res$p.adjust < 0.05 ,])
total <- exprs(corrected)
total <- total[rownames(total) %in% pois_res_names ,]
target <- pData(corrected)
View(target)
new_corrected <- MSnbase::MSnSet(exprs = as.matrix(total), pData = target)
h <- nrow(exprs(new_corrected))/(2.54/0.35)
pdf(file = file, width = 7, height = h)
h
pdf(file = "hello", width = 7, height = h)
exp.heatmap(new_corrected, "Treatment", h = h, tit = "")
dev.off()
runApp()
target <- pData(corrected)
### Null and alternative model
null_f <- "y ~ 1"
### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Quasi-likelihood GLM
qlr_res <- msms.glm.qlll(corrected, alt_f, null_f, div = div)
qlr_res$p.adjust <- p.adjust(qlr_res$p.value, method = "fdr")
qlr_res_names <- rownames(qlr_res[qlr_res$p.adjust < 0.05 ,])
total <- exprs(corrected)
total <- total[rownames(total) %in% qlr_res_names ,]
target <- pData(corrected)
my_group <- as.numeric(as.factor(target$Treatment))
colSide <- brewer.pal(8, "Dark2")[my_group]
colMain <- colorRampPalette( c("green", "black", "red"), space = "rgb")(64)
heatmap(t(scale(t(total))), ColSideColors = colSide, col = colMain, labRow = NA)
### Quasi-likelihood GLM
binomial_res <- msms.edgeR(corrected, alt_f, null_f, div = div, fnm = "Treatment")
binomial_res$p.adjust <- p.adjust(binomial_res$p.value, method = "fdr")
binomial_res_names <- rownames(binomial_res[binomial_res$p.adjust < 0.05 ,])
total <- exprs(corrected)
total <- total[rownames(total) %in% binomial_res_names ,]
target <- pData(corrected)
my_group <- as.numeric(as.factor(target$Treatment))
colSide <- brewer.pal(8, "Dark2")[my_group]
colMain <- colorRampPalette( c("green", "black", "red"), space = "rgb")(64)
heatmap(t(scale(t(total))), ColSideColors = colSide, col = colMain, labRow = NA)
runApp()
runApp()
runApp()
