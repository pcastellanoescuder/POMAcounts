high = retval$breaks[-1], color = retval$col)
invisible(retval)
}
###  EXPANDED HEAT MAP ON THE NORMALIZED MATRIX
exp.heatmap <- function(e,fnm,h,tit)
{
cls <- brewer.pal(8,"Dark2")[as.integer(as.factor(pData(e)[,fnm]))]
###  Filter dataset
data <- exprs(e)
data <- data[filter.flags(exprs(e)),]
###  Expression to write data on the heatmap
add.expr <- expression(
{ par(mar = c(margins[1], 0, 0, margins[2]))
for(j in 1:ncol(SpC.expr))
text(j,1:nrow(SpC.expr),labels=round(SpC.expr[rowInd,colInd[j]],1),
cex=0.6,font=2,col=tracecol)
})
gtit <- paste("Heatmap_",tit,sep="")
hm <- heatmap.2jg(t(scale(t(data))),col=greenred(255),trace="none",
key=FALSE,cexRow=0.6,cexCol=0.7,margins=c(5,6),dendrogram="both",
add.expr=add.expr,lhei=c(2,h-3),SpC.expr=data,
ColSideColors=cls)
}
h <- nrow(exprs(e))/(2.54/0.35)
# pdf(file = paste0(Sys.Date(), "_expanded_heatmap.pdf"), width = 7, height = h)
exp.heatmap(e, "Treatment", h = h, tit = "")
exp.heatmap
###  EXPANDED HEAT MAP ON THE NORMALIZED MATRIX
exp.heatmap <- function(e,fnm,h,tit)
{
cls <- c("red", "blue")[as.integer(as.factor(pData(e)[,fnm]))] # brewer.pal(8,"Dark2")
###  Filter dataset
data <- exprs(e)
data <- data[filter.flags(exprs(e)),]
###  Expression to write data on the heatmap
add.expr <- expression(
{ par(mar = c(margins[1], 0, 0, margins[2]))
for(j in 1:ncol(SpC.expr))
text(j,1:nrow(SpC.expr),labels=round(SpC.expr[rowInd,colInd[j]],1),
cex=0.6,font=2,col=tracecol)
})
gtit <- paste("Heatmap_",tit,sep="")
hm <- heatmap.2jg(t(scale(t(data))),col=greenred(255),trace="none",
key=FALSE,cexRow=0.6,cexCol=0.7,margins=c(5,6),dendrogram="both",
add.expr=add.expr,lhei=c(2,h-3),SpC.expr=data,
ColSideColors=cls)
}
h <- nrow(exprs(e))/(2.54/0.35)
# pdf(file = paste0(Sys.Date(), "_expanded_heatmap.pdf"), width = 7, height = h)
exp.heatmap(e, "Treatment", h = h, tit = "")
dev.off()
# pdf(file = paste0(Sys.Date(), "_expanded_heatmap.pdf"), width = 7, height = h)
par(mar=c(1,1,1,1))
exp.heatmap(e, "Treatment", h = h, tit = "")
heatmap.2(exprs(e))
# dev.off()
# insert(output,paste("  See: ",pdf.flnm,"_expanded_heatmap.pdf", sep=""))
pdf(file = paste0(Sys.Date(), "_expanded_heatmap.pdf"), width = 7, height = h)
# par(mar=c(1,1,1,1))
exp.heatmap(e, "Treatment", h = h, tit = "")
dev.off()
h <- nrow(exprs(e))/(2.54/0.35)
pdf(file = paste0(Sys.Date(), "_expanded_heatmap.pdf"), width = 7, height = h)
exp.heatmap(e, "Treatment", h = h, tit = "")
?par(mar=c(1,1,1,1))
library(gtools)
h <- nrow(exprs(e))/(2.54/0.35)
pdf(file = paste0(Sys.Date(), "_expanded_heatmap.pdf"), width = 7, height = h)
exp.heatmap(e, "Treatment", h = h, tit = "")
dev.off()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
curl_fetch_memory("https://httpbin.org/get", new_handle(verbose = TRUE))
curl::curl_fetch_memory("https://httpbin.org/get", new_handle(verbose = TRUE))
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
tempdir()
file.path(tempdir(), "EDA_POMA_Report.Rmd")
file.copy("EDA_POMA_Report.Rmd", tempReport, overwrite = TRUE)
tempReport <- file.path(tempdir(), "EDA_POMA_Report.Rmd")
file.copy("EDA_POMA_Report.Rmd", tempReport, overwrite = TRUE)
?render
globalenv()
runApp()
runApp()
runApp()
shiny::runApp()
msmsEDA::counts.heatmap()
msmsEDA::counts.heatmap
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
library(msmsTests)
library(msmsTests)
shiny::runApp()
runApp()
?msms.glm.pois
proteines
target
corrected
### Null and alternative model
null_f <- "y~1"
alt_f <- "y~treat"
### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Poisson GLM
pois_res <- msms.glm.pois(corrected, alt_f, null_f, div = div)
pData(corrected)
alt_f <- "y~Treatment"
### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Poisson GLM
pois_res <- msms.glm.pois(corrected, alt_f, null_f, div = div)
View(pois_res)
pois_res$p.adjust <- p.adjust(pois_res$p.value, method = "BH")
alt_f <- "y~Treatment + Batch"
### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Poisson GLM
pois_res <- msms.glm.pois(corrected, alt_f, null_f, div = div)
pois_res$p.adjust <- p.adjust(pois_res$p.value, method = "BH")
?selectInput
?p.adjust
runApp()
### Null and alternative model
null_f <- "y ~ Batch"
alt_f <- "y ~ Treatment + Batch"
### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Poisson GLM
pois_res <- msms.glm.pois(corrected, alt_f, null_f, div = div)
pois_res$p.adjust <- p.adjust(pois_res$p.value, method = input$adjustment_method_poisson)
?updateSelectInput
x <- names(pData(corrected))
x
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?textInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
?msms.edgeR
runApp()
runApp()
library(plotly)
# Data: volcano is provided by plotly
# Plot
p <- plot_ly(z = volcano, type = "surface")
p
volcano
?volcano
POMA::PomaVolcano
runApp()
### Null and alternative model
null_f <- "y ~ 1"
alt_f <- paste0("y ~ ", input$h1_1)
alt_f <- "y~Treatment"
### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Poisson GLM
pois_res <- msms.glm.pois(corrected, alt_f, null_f, div = div)
pois_res$p.adjust <- p.adjust(pois_res$p.value, method = input$adjustment_method_poisson)
pois_res$p.adjust <- p.adjust(pois_res$p.value, method = "BH")
pval <- "raw"
data <- pois_res
names <- rownames(data)
names
df <- pois_res
names <- rownames(df)
log2FC <- 1.5
df <- mutate(df, threshold = as.factor(ifelse(df$pvalue >= pval_cutoff,
yes = "none",
no = ifelse(df$FC < log2(log2FC),
yes = ifelse(df$FC < -log2(log2FC),
yes = "Down-regulated",
no = "none"),
no = "Up-regulated"))))
pval_cutoff <- 0.05
df <- mutate(df, threshold = as.factor(ifelse(df$pvalue >= pval_cutoff,
yes = "none",
no = ifelse(df$FC < log2(log2FC),
yes = ifelse(df$FC < -log2(log2FC),
yes = "Down-regulated",
no = "none"),
no = "Up-regulated"))))
View(df)
pval_cutoff
df$pvalue
df$pvalue
df <- data.frame(pvalue = df$p.value, FC = df$LogFC, names = names)
df <- mutate(df, threshold = as.factor(ifelse(df$pvalue >= pval_cutoff,
yes = "none",
no = ifelse(df$FC < log2(log2FC),
yes = ifelse(df$FC < -log2(log2FC),
yes = "Down-regulated",
no = "none"),
no = "Up-regulated"))))
ggplot(data = df, aes(x = FC, y = -log10(pvalue), colour = threshold)) +
geom_point(size=1.75) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p")+
ggtitle("Comparisson: Group2/Group1") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
labs(color = "") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363"))
ggplot(data = df, aes(x = FC, y = -log10(pvalue), colour = threshold)) +
geom_point(size=1.75) +
# xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p")+
ggtitle("Comparisson: Group2/Group1") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
labs(color = "") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363"))
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), colour = threshold)) +
geom_point(size=1.75) +
# xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p")+
ggtitle("Comparisson: Group2/Group1") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
labs(color = "") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
xlim <- 5
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), colour = threshold)) +
geom_point(size=1.75) +
# xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p")+
ggtitle("Comparisson: Group2/Group1") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
labs(color = "") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), colour = threshold)) +
geom_point(size=1.75) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p")+
ggtitle("Comparisson: Group2/Group1") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
labs(color = "") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold)) +
geom_point(size=1.75) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p")+
ggtitle("Comparisson: Group2/Group1") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
labs(color = "") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
?ggplotly
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold)) +
geom_point(size=1.75) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p")+
ggtitle("Comparisson: Group2/Group1") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
labs(color = "") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")), tooltip = NULL)
plotly_example("shiny", "ggplotly_sizing")
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold)) +
geom_point(size = 1.75, alpha = 0.2) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p")+
ggtitle("Comparisson: Group2/Group1") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
labs(color = "") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold)) +
geom_point(size = 1.75, alpha = 0.8) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p")+
ggtitle("Comparisson: Group2/Group1") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
labs(color = "") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold)) +
geom_point(size = 1.75, alpha = 0.8) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
# scale_y_continuous(trans = "log1p") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
labs(color = "") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold)) +
geom_point(size = 1.75, alpha = 0.8) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
# labs(color = "") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
df <- data.frame(pvalue = df$p.value, FC = round(df$LogFC, 2), names = names)
pval, log2FC, pval_cutoff, xlim
df <- pois_res
df <- data.frame(pvalue = df$p.value, FC = round(df$LogFC, 2), names = names)
df <- mutate(df, threshold = as.factor(ifelse(df$pvalue >= pval_cutoff,
yes = "none",
no = ifelse(df$FC < log2(log2FC),
yes = ifelse(df$FC < -log2(log2FC),
yes = "Down-regulated",
no = "none"),
no = "Up-regulated"))))
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold)) +
geom_point(size = 1.75, alpha = 0.8) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
View(df)
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold, fill = names)) +
geom_point(size = 1.75, alpha = 0.8) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold, fill = names)) +
geom_point(size = 1.75, alpha = 0.8) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
scale_fill_manual() +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold, labels = names)) +
geom_point(size = 1.75, alpha = 0.8) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
runApp()
runApp()
?numericInput
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
?msms.edgeR
runApp()
runApp()
runApp()
runApp()
?msms.glm.qlll
?msms.glm.pois
runApp()
runApp()
shiny::runApp()
BiocManager::install("msmsTests")
runApp()
runApp()
runApp()
runApp()
runApp()
POMA::POPomaVolcano()
POMA::PomaVolcano
runApp()
runApp()
runApp()
?msmsEDA::spc.scatterplot
runApp()
runApp()
runApp()
