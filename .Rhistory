View(means)
binomial_resX <- cbind(means, binomial_res)
View(binomial_resX)
runApp()
runApp()
log(147.61)/log(168.1)
log(168.1)/log(147.61)
log2(168.1)/log2(147.61)
log2(147.61)/log2(168.1)
log(147.61/168.1)
log(168.1/147.61)
log2(168.1/147.61)
log(168.1/147.61)
log2(168.1/147.61)
log2(168.1/147.61)
log2(grupo2/grupo1)
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T)
proteines <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
proteines[is.na(proteines)] <- 33
colnames(target) <- c("Sample", "Treatment", "Batch")
colnames(proteines)[2] <- "Accession"
target <- column_to_rownames(target, "Sample")
proteines <- column_to_rownames(proteines, "Accession")
proteines <- proteines[, colnames(proteines) %in% rownames(target)]
corrected <- MSnbase::MSnSet(exprs = as.matrix(proteines), pData = target)
my_counts <- exprs(corrected) %>% t() %>% as.data.frame() %>% mutate(Treatment = target$Treatment)
means <- data.frame(aggregate(my_counts, by = list(my_counts$Treatment), FUN = mean)) %>%
column_to_rownames("Group.1") %>% t() %>% as.data.frame() %>% round(2) %>% filter(rownames(.) != "Treatment")
colnames(means) <- paste0("Mean", colnames(means))
### Null and alternative model
null_f <- "y ~ 1"
alt_f <- "y~Treatment"
### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Quasi-likelihood GLM
binomial_res <- msms.edgeR(corrected, alt_f, null_f, div = div, fnm = "Treatment")
binomial_res$p.adjust <- p.adjust(binomial_res$p.value, method = input$adjustment_method_binomial)
binomial_res$p.adjust <- p.adjust(binomial_res$p.value, method = "fdr")
binomial_res <- cbind(means, binomial_res) %>% rename(log2FC = LogFC)
View(binomial_res)
168.1/147.61
log2(168.1)/log2(147.61)
runApp()
runApp()
runApp()
(33+53+67)/3
(263+124+146)/3
(33+53+67+263+124+146)/6
(51+177.6667)/2
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T)
proteines <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
proteines[is.na(proteines)] <- 33
colnames(target) <- c("Sample", "Treatment", "Batch")
colnames(proteines)[2] <- "Accession"
target <- column_to_rownames(target, "Sample")
proteines <- column_to_rownames(proteines, "Accession")
proteines <- proteines[, colnames(proteines) %in% rownames(target)]
corrected <- MSnbase::MSnSet(exprs = as.matrix(proteines), pData = target)
my_counts <- exprs(corrected) %>% t() %>% as.data.frame() %>% mutate(Treatment = target$Treatment)
means <- data.frame(aggregate(my_counts, by = list(my_counts$Treatment), FUN = mean)) %>%
column_to_rownames("Group.1") %>% t() %>% as.data.frame() %>% round(2) %>% filter(rownames(.) != "Treatment")
colnames(means) <- paste0("Mean", colnames(means))
### Null and alternative model
null_f <- "y ~ 1"
alt_f <- "y~Treatment"
### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Quasi-likelihood GLM
binomial_res <- msms.edgeR(corrected, alt_f, null_f, div = div, fnm = "Treatment")
binomial_res$p.adjust <- p.adjust(binomial_res$p.value, method = input$adjustment_method_binomial)
binomial_res$p.adjust <- p.adjust(binomial_res$p.value, method = "fdr")
binomial_res <- cbind(means, binomial_res) %>% rename(log2FC = LogFC) %>% mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3))
df <- binomial_res
df <- data.frame(pvalue = df$p.value, FC = round(df$log2FC, 2), names = names, counts = mean(df[,1], df[,2]))
df <- data.frame(pvalue = df$p.value, FC = round(df$log2FC, 2), names = names, counts = mean(df[,1:2]))
df <- df %>% rowwise() %>% mutate(counts = vars(starts_with("Mean")))
View(df)
df <- binomial_res
dfX <- df %>% rowwise() %>% mutate(counts = mean(vars(starts_with("Mean"))))
View(dfX)
dfX <- df %>% rowwise() %>% mutate(counts = ~ mean(vars(starts_with("Mean"))))
dfX <- df %>% mutate(counts = rowMeans(select(., starts_with("Mean")), na.rm = TRUE))
(136.67+239)/2
(100+51.67)/2
df <- df %>% mutate(counts = rowMeans(select(., starts_with("Mean")), na.rm = TRUE))
df <- data.frame(pvalue = df$p.value, FC = round(df$log2FC, 2), names = names, counts = round(df$counts, 2))
df <- binomial_res
df <- df %>% mutate(counts = rowMeans(select(., starts_with("Mean")), na.rm = TRUE))
df <- data.frame(pvalue = df$p.value, FC = round(df$log2FC, 2), names = names, counts = round(df$counts, 2))
df$p.value
round(df$log2FC, 2)
names <- rownames(df)
df <- data.frame(pvalue = df$p.value, FC = round(df$log2FC, 2), names = names, counts = round(df$counts, 2))
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = counts, labels = names)) +
geom_point(size = 1.75, alpha = 0.8) +
xlim(c(-(5), 5)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p") +
geom_vline(xintercept = -log2(1.5), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(1.5), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(input$pval_cutoff3), colour = "black", linetype = "dashed") +
theme_bw())
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = counts, labels = names)) +
geom_point(size = 1.75, alpha = 0.8) +
xlim(c(-(5), 5)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p") +
geom_vline(xintercept = -log2(1.5), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(1.5), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(0.05), colour = "black", linetype = "dashed") +
theme_bw())
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
proteines <- read.table("/Users/pol/Dropbox/JosepVillanueva/MTA231-counts.txt", header = T, sep = "\t")
View(proteines)
proteines$Proteins[1]
stringr::str_detect("GN=", proteines$Proteins[1])
stringr::str_detect(proteines$Proteins[1], "GN=")
stringr::str_extract(proteines$Proteins[1], "GN=")
stringr::str_extract_all(proteines$Proteins[1], "GN=")
stringr::str_extract_all(proteines$Proteins[1], "GN=")
stringr::str_remove(proteines$Proteins[1], pattern = "^.*:")
stringr::str_remove(proteines$Proteins[1], pattern = "^.*GN=")
stringr::str_remove(proteines$Proteins[1], pattern = "^.*GN=") %>% stringr::str_remove(proteines$Proteins[1], pattern = "(?s) .*")
library(tidyverse)
stringr::str_remove(proteines$Proteins[1], pattern = "^.*GN=") %>% stringr::str_remove(proteines$Proteins[1], pattern = "(?s) .*")
stringr::str_remove(proteines$Proteins[1], pattern = "^.*GN=") %>% stringr::str_remove(pattern = "(?s) .*")
shiny::runApp()
runApp()
proteines <- read.table("/Users/pol/Dropbox/JosepVillanueva/MTA231-counts.txt", header = T, sep = "\t")
colnames(proteines)[2] <- "Accession"
colnames(proteines)[1] <- "gene_name"
proteines <- proteines %>%
mutate(Accession = paste0(gene_name, "|", Accession))
View(proteines)
proteines %>%
separate(GeneName, sep = "|", into = c("GeneName", "Protein")) %>%
mutate(GeneName = stringr::str_remove(GeneName, pattern = "^.*GN="),
GeneName = stringr::str_remove(GeneName, pattern = "(?s) .*")) %>%
column_to_rownames("Protein")
proteines %>%
rename(GeneName = Accession) %>% separate(GeneName, sep = "|", into = c("GeneName", "Protein")) %>%
mutate(GeneName = stringr::str_remove(GeneName, pattern = "^.*GN="),
GeneName = stringr::str_remove(GeneName, pattern = "(?s) .*")) %>%
column_to_rownames("Protein")
proteines %>%
rename(GeneName = Accession) %>% separate(GeneName, sep = "|", into = c("GeneName", "Protein"))
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/MTA231-samples.txt", header = T, sep = "\t")
proteines <- read.table("/Users/pol/Dropbox/JosepVillanueva/MTA231-counts.txt", header = T, sep = "\t")
colnames(target) <- c("Sample", "Treatment", "Batch")
colnames(proteines)[2] <- "Accession"
colnames(proteines)[1] <- "gene_name"
proteines <- proteines %>%
mutate(Accession = paste0(gene_name, "|", Accession))
target <- column_to_rownames(target, "Sample")
proteines <- column_to_rownames(proteines, "Accession")
proteines <- proteines[, colnames(proteines) %in% rownames(target)]
data <- MSnbase::MSnSet(exprs = as.matrix(proteines), pData = target)
raw <- pp.msms.data(data)
counts <- Biobase::exprs(raw)
tcnts <- apply(counts, 2, sum)
medt <- median(tcnts)
div <- data.frame(median = tcnts/medt)
div$sample <- rownames(div)
div$Treatment <- target$Treatment
counts <- Biobase::exprs(raw)
tspc <- apply(counts, 2, sum)
div <- tspc/median(tspc)
norm <- norm.counts(raw, div)
counts <- Biobase::exprs(norm)
tcnts <- apply(counts, 2, sum)
medt <- median(tcnts)
div <- data.frame(median = tcnts/medt)
div$sample <- rownames(div)
div$Treatment <- target$Treatment
target <- pData(norm)
neutralized <- batch.neutralize(exprs(norm), target$Batch, half = TRUE, sqrt.trans = TRUE)
corrected <- MSnSet(exprs = as.matrix(neutralized), pData = pData(norm))
target <- pData(corrected)
my_counts <- exprs(corrected) %>% t() %>% as.data.frame() %>% mutate(Treatment = target$Treatment)
means <- data.frame(aggregate(my_counts, by = list(my_counts$Treatment), FUN = mean)) %>%
column_to_rownames("Group.1") %>% t() %>% as.data.frame() %>% round(2) %>% filter(rownames(.) != "Treatment")
colnames(means) <- paste0("Mean", colnames(means))
### Null and alternative model
null_f <- "y ~ 1"
alt_f <- "y~Treatment"
### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Quasi-likelihood GLM
binomial_res <- msms.edgeR(corrected, alt_f, null_f, div = div, fnm = "Treatment")
binomial_res$p.adjust <- p.adjust(binomial_res$p.value, method = input$adjustment_method_binomial)
binomial_res$p.adjust <- p.adjust(binomial_res$p.value, method = "fdr")
View(binomial_res)
View(my_counts)
View(means)
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
GeneName = my_names) %>%
separate(GeneName, sep = "|", into = c("GeneName", "Protein")) %>%
mutate(GeneName = stringr::str_remove(GeneName, pattern = "^.*GN="),
GeneName = stringr::str_remove(GeneName, pattern = "(?s) .*")) %>%
column_to_rownames("Protein")
my_names <- rownames(binomial_res)
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
GeneName = my_names) %>%
separate(GeneName, sep = "|", into = c("GeneName", "Protein")) %>%
mutate(GeneName = stringr::str_remove(GeneName, pattern = "^.*GN="),
GeneName = stringr::str_remove(GeneName, pattern = "(?s) .*")) %>%
column_to_rownames("Protein")
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
GeneName = my_names)
View(binomial_res2)
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
GeneName = my_names) %>%
remove_rownames() %>%
separate(GeneName, sep = "|", into = c("GeneName", "Protein")) %>%
mutate(GeneName = stringr::str_remove(GeneName, pattern = "^.*GN="),
GeneName = stringr::str_remove(GeneName, pattern = "(?s) .*")) %>%
column_to_rownames("Protein")
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
GeneName = my_names) %>%
remove_rownames()
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
GeneName = my_names) %>%
remove_rownames() %>%
separate(GeneName, sep = "|", into = c("GeneName", "Protein"))
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
GeneName = my_names) %>%
remove_rownames() %>%
separate(GeneName, sep = "|", into = c("GeneName2", "Protein"))
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
GeneName = my_names) %>%
# remove_rownames() %>%
# separate(GeneName, sep = "|", into = c("GeneName2", "Protein")) %>%
mutate(GeneName = stringr::str_remove(GeneName, pattern = "^.*GN="),
GeneName = stringr::str_remove(GeneName, pattern = "(?s) .*"))
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
names = my_names) %>%
# remove_rownames() %>%
# separate(GeneName, sep = "|", into = c("GeneName2", "Protein")) %>%
mutate(GeneName = stringr::str_remove(names, pattern = "^.*GN="),
GeneName = stringr::str_remove(names, pattern = "(?s) .*"),
Protein = stringr::str_remove(names, pattern = "^.*|")) %>%
column_to_rownames("Protein")
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
names = my_names) %>%
# remove_rownames() %>%
# separate(GeneName, sep = "|", into = c("GeneName2", "Protein")) %>%
mutate(GeneName = stringr::str_remove(names, pattern = "^.*GN="),
GeneName = stringr::str_remove(names, pattern = "(?s) .*"),
Protein = stringr::str_remove(names, pattern = "^.*|"))
binomial_res2$names[1]
### Quasi-likelihood GLM
binomial_res <- msms.edgeR(corrected, alt_f, null_f, div = div, fnm = "Treatment")
div
corrected
target <- pData(corrected)
my_counts <- exprs(corrected) %>% t() %>% as.data.frame() %>% mutate(Treatment = target$Treatment)
means <- data.frame(aggregate(my_counts, by = list(my_counts$Treatment), FUN = mean)) %>%
column_to_rownames("Group.1") %>% t() %>% as.data.frame() %>% round(2) %>% filter(rownames(.) != "Treatment")
colnames(means) <- paste0("Mean", colnames(means))
### Null and alternative model
null_f <- "y ~ 1"
alt_f <- paste0("y ~ ", input$h1_3)
aalt_f
alt_f
### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Quasi-likelihood GLM
binomial_res <- msms.edgeR(corrected, alt_f, null_f, div = div, fnm = "Treatment")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/MTA231-samples.txt", header = T, sep = "\t")
proteines <- read.table("/Users/pol/Dropbox/JosepVillanueva/MTA231-counts.txt", header = T, sep = "\t")
colnames(target) <- c("Sample", "Treatment", "Batch")
colnames(proteines)[2] <- "Accession"
colnames(proteines)[1] <- "gene_name"
proteines <- proteines %>%
mutate(Accession = paste0(gene_name, "|", Accession))
target <- column_to_rownames(target, "Sample")
proteines <- column_to_rownames(proteines, "Accession")
proteines <- proteines[, colnames(proteines) %in% rownames(target)]
View(proteines)
View(target)
View(target)
target <- target[1:6 ,]
proteines <- proteines[, 1:6]
data <- MSnbase::MSnSet(exprs = as.matrix(proteines), pData = target)
raw <- pp.msms.data(data)
counts <- Biobase::exprs(raw)
tcnts <- apply(counts, 2, sum)
medt <- median(tcnts)
div <- data.frame(median = tcnts/medt)
div$sample <- rownames(div)
div$Treatment <- target$Treatment
counts <- Biobase::exprs(raw)
tspc <- apply(counts, 2, sum)
div <- tspc/median(tspc)
norm <- norm.counts(raw, div)
counts <- Biobase::exprs(norm)
tcnts <- apply(counts, 2, sum)
medt <- median(tcnts)
div <- data.frame(median = tcnts/medt)
div$sample <- rownames(div)
div$Treatment <- target$Treatment
target <- pData(norm)
neutralized <- batch.neutralize(exprs(norm), target$Batch, half = TRUE, sqrt.trans = TRUE)
corrected <- MSnSet(exprs = as.matrix(neutralized), pData = pData(norm))
my_counts <- exprs(corrected) %>% t() %>% as.data.frame() %>% mutate(Treatment = target$Treatment)
means <- data.frame(aggregate(my_counts, by = list(my_counts$Treatment), FUN = mean)) %>%
column_to_rownames("Group.1") %>% t() %>% as.data.frame() %>% round(2) %>% filter(rownames(.) != "Treatment")
colnames(means) <- paste0("Mean", colnames(means))
### Null and alternative model
null_f <- "y ~ 1"
alt_f
### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Quasi-likelihood GLM
binomial_res <- msms.edgeR(corrected, alt_f, null_f, div = div, fnm = "Treatment")
binomial_res$p.adjust <- p.adjust(binomial_res$p.value, method = input$adjustment_method_binomial)
View(binomial_res)
binomial_res$p.adjust <- p.adjust(binomial_res$p.value, method = "fdr")
my_names <- rownames(binomial_res)
my_names
cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
names = my_names)
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
names = my_names)
View(binomial_res2)
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
names = my_names) %>%
# remove_rownames() %>%
# separate(GeneName, sep = "|", into = c("GeneName2", "Protein")) %>%
mutate(GeneName = stringr::str_remove(names, pattern = "^.*GN="),
GeneName = stringr::str_remove(names, pattern = "(?s) .*"),
Protein = stringr::str_remove(names, pattern = "^.*|"))
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
names = my_names) %>%
# remove_rownames() %>%
separate(names, sep = "|", into = c("GeneName", "Protein"))
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
names = my_names) %>%
# remove_rownames() %>%
str_split_fixed(names, "|", 2)
?separate
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
names = my_names) %>%
# remove_rownames() %>%
tidyr::separate(names, into = c("GeneName", "Protein"), sep = "|")
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
names = my_names)
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
names = my_names,
GeneName = stringr::str_remove(names, pattern = "^.*GN="),
GeneName = stringr::str_remove(names, pattern = "(?s) .*"),
Protein = stringr::str_remove(names, pattern = "^.*|"))
stringr::str_remove(my_names, pattern = "^.*GN=")
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
names = my_names,
GeneName = stringr::str_remove(names, pattern = "^.*GN="),
GeneName = stringr::str_remove(names, pattern = "(?s) .*"))
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
names = my_names,
GeneName = stringr::str_remove(names, pattern = "^.*GN="),
GeneName = stringr::str_remove(GeneName, pattern = "(?s) .*"),
Protein = stringr::str_remove(GeneName, pattern = "^.*|")) %>%
remove_rownames() %>%
column_to_rownames("Protein")
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
names = my_names,
GeneName = stringr::str_remove(names, pattern = "^.*GN="),
GeneName = stringr::str_remove(GeneName, pattern = "(?s) .*"),
Protein = stringr::str_remove(GeneName, pattern = "^.*|"))
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
names = my_names,
GeneName = stringr::str_remove(names, pattern = "^.*GN="),
GeneName = stringr::str_remove(GeneName, pattern = "(?s) .*"),
Protein = stringr::str_remove(names, pattern = "^.*|")) %>%
remove_rownames() %>%
column_to_rownames("Protein")
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
names = my_names,
GeneName = stringr::str_remove(names, pattern = "^.*GN="),
GeneName = stringr::str_remove(GeneName, pattern = "(?s) .*"),
Protein = stringr::str_remove(names, pattern = "^.*|"))
cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
names = my_names,
GeneName = stringr::str_remove(names, pattern = "^.*GN="),
GeneName = stringr::str_remove(GeneName, pattern = "(?s) .*"),
Protein = stringr::str_remove(names, pattern = "^.*\|"))
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
names = my_names,
GeneName = stringr::str_remove(names, pattern = "^.*GN="),
GeneName = stringr::str_remove(GeneName, pattern = "(?s) .*"),
Protein = stringr::str_remove(names, pattern = ".*|"))
stringr::str_remove(my_names, pattern = ".*|"))
stringr::str_remove(my_names[1], pattern = ".*|")
my_names[1]
stringr::str_remove(my_names[1], pattern = "^.*|")
stringr::str_remove(my_names[1], pattern = "^.*;")
runApp()
binomial_res2 <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
names = my_names,
GeneName = stringr::str_remove(names, pattern = "^.*GN="),
GeneName = stringr::str_remove(GeneName, pattern = "(?s) .*"),
Protein = stringr::str_remove(names, pattern = "^.*;")) %>%
remove_rownames() %>%
column_to_rownames("Protein")
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
a <- c(1,2,3,1,2,3,42)
a/sum(a)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
cite(msmsTests)
citation(msmsTests)
citation("msmsTests")
runApp()
runApp()
