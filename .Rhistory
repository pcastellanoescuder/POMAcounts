scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
View(df)
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold, fill = names)) +
geom_point(size = 1.75, alpha = 0.8) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold, fill = names)) +
geom_point(size = 1.75, alpha = 0.8) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
scale_fill_manual() +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold, labels = names)) +
geom_point(size = 1.75, alpha = 0.8) +
xlim(c(-(xlim), xlim)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p") +
geom_vline(xintercept = -log2(log2FC), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(pval_cutoff), colour = "black", linetype = "dashed") +
# ggrepel::geom_label_repel(data = df[df$pvalue < pval_cutoff & (df$FC > log2(log2FC) | df$FC < -log2(log2FC)),],
#                           aes(x = FC, y = -log10(pvalue), label = names), show.legend = FALSE) +
theme(legend.position = "none") +
theme_minimal() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
runApp()
runApp()
?numericInput
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
?msms.edgeR
runApp()
runApp()
runApp()
runApp()
?msms.glm.qlll
?msms.glm.pois
runApp()
runApp()
shiny::runApp()
BiocManager::install("msmsTests")
runApp()
runApp()
runApp()
runApp()
runApp()
POMA::POPomaVolcano()
POMA::PomaVolcano
runApp()
runApp()
runApp()
?msmsEDA::spc.scatterplot
runApp()
runApp()
runApp()
scrollX = TRUE,
shiny::runApp()
runApp()
runApp()
runApp()
sqrt(2)
POMA::PomaImpute
runApp()
runApp()
?heatmap
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
exprs(st0)
proteines <- read.table("/Users/pol/Dropbox/JosepVillanueva/Counts.txt")
proteines <- read.table("/Users/pol/Dropbox/JosepVillanueva/Counts.txt", sep = "\t")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/Samples.txt", sep = "\t")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/Samples.txt")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/Sample.txt")
proteines <- read.table("/Users/pol/Dropbox/JosepVillanueva/Counts.txt", sep = "\t")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/Sample.txt")
colnames(target) <- c("Sample", "Treatment", "Batch")
colnames(proteines)[2] <- "Accession"
target <- column_to_rownames(target, "Sample")
proteines <- column_to_rownames(proteines, "Accession")
proteines <- proteines[, colnames(proteines) %in% rownames(target)]
data <- MSnbase::MSnSet(exprs = as.matrix(proteines), pData = target)
View(proteines)
proteines <- read.table("/Users/pol/Dropbox/JosepVillanueva/Counts.txt", sep = "\t")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/Sample.txt")
proteines <- read.table("/Users/pol/Dropbox/JosepVillanueva/Counts.txt", header = T, sep = "\t")
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/Sample.txt", header = T)
colnames(target) <- c("Sample", "Treatment", "Batch")
colnames(proteines)[2] <- "Accession"
target <- column_to_rownames(target, "Sample")
proteines <- column_to_rownames(proteines, "Accession")
proteines <- proteines[, colnames(proteines) %in% rownames(target)]
data <- MSnbase::MSnSet(exprs = as.matrix(proteines), pData = target)
raw <- pp.msms.data(data)
counts <- Biobase::exprs(raw)
tcnts <- apply(counts, 2, sum)
medt <- median(tcnts)
div <- data.frame(median = tcnts/medt)
div$sample <- rownames(div)
div$Treatment <- target$Treatment
counts <- Biobase::exprs(raw)
tspc <- apply(counts, 2, sum)
div <- tspc/median(tspc)
norm <- norm.counts(raw, div)
counts <- Biobase::exprs(norm)
tcnts <- apply(counts, 2, sum)
medt <- median(tcnts)
div <- data.frame(median = tcnts/medt)
div$sample <- rownames(div)
div$Treatment <- target$Treatment
target <- pData(norm)
neutralized <- batch.neutralize(exprs(norm), target$Batch, half = TRUE, sqrt.trans = TRUE)
corrected <- MSnSet(exprs = as.matrix(neutralized), pData = pData(norm))
target <- pData(corrected)
### Null and alternative model
null_f <- "y ~ 1"
alt_f <- "y~Treatment"
### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Poisson GLM
pois_res <- msms.glm.pois(corrected, alt_f, null_f, div = div)
pois_res$p.adjust <- p.adjust(pois_res$p.value, method = "fdr")
pois_res_names <- rownames(pois_res)[pois_res$p.adjust < 0.05 ,]
View(pois_res)
pois_res$p.adjust < 0.05
pois_res_names <- pois_res[pois_res$p.adjust < 0.05 ,]
pois_res_names <- rownames(pois_res[pois_res$p.adjust < 0.05 ,])
pois_res_names
total <- exprs(corrected)
total <- total[rownames(total) %in% pois_res_names]
target <- pData(corrected)
my_group <- as.numeric(as.factor(target$Treatment))
colSide <- brewer.pal(8, "Dark2")[my_group]
colMain <- colorRampPalette( c("green", "black", "red"), space = "rgb")(64)
heatmap(t(scale(t(total))), ColSideColors = colSide, col = colMain, labRow = NA)
total <- total[rownames(total) %in% pois_res_names ,]
target <- pData(corrected)
my_group <- as.numeric(as.factor(target$Treatment))
total <- exprs(corrected)
total <- total[rownames(total) %in% pois_res_names]
total
total <- exprs(corrected)
total <- total[rownames(total) %in% pois_res_names ,]
target <- pData(corrected)
my_group <- as.numeric(as.factor(target$Treatment))
colSide <- brewer.pal(8, "Dark2")[my_group]
colMain <- colorRampPalette( c("green", "black", "red"), space = "rgb")(64)
heatmap(t(scale(t(total))), ColSideColors = colSide, col = colMain, labRow = NA)
pois_res_names <- rownames(pois_res[pois_res$p.adjust < 0.05 ,])
total <- exprs(corrected)
total <- total[rownames(total) %in% pois_res_names ,]
target <- pData(corrected)
View(target)
new_corrected <- MSnbase::MSnSet(exprs = as.matrix(total), pData = target)
h <- nrow(exprs(new_corrected))/(2.54/0.35)
pdf(file = file, width = 7, height = h)
h
pdf(file = "hello", width = 7, height = h)
exp.heatmap(new_corrected, "Treatment", h = h, tit = "")
dev.off()
runApp()
target <- pData(corrected)
### Null and alternative model
null_f <- "y ~ 1"
### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Quasi-likelihood GLM
qlr_res <- msms.glm.qlll(corrected, alt_f, null_f, div = div)
qlr_res$p.adjust <- p.adjust(qlr_res$p.value, method = "fdr")
qlr_res_names <- rownames(qlr_res[qlr_res$p.adjust < 0.05 ,])
total <- exprs(corrected)
total <- total[rownames(total) %in% qlr_res_names ,]
target <- pData(corrected)
my_group <- as.numeric(as.factor(target$Treatment))
colSide <- brewer.pal(8, "Dark2")[my_group]
colMain <- colorRampPalette( c("green", "black", "red"), space = "rgb")(64)
heatmap(t(scale(t(total))), ColSideColors = colSide, col = colMain, labRow = NA)
### Quasi-likelihood GLM
binomial_res <- msms.edgeR(corrected, alt_f, null_f, div = div, fnm = "Treatment")
binomial_res$p.adjust <- p.adjust(binomial_res$p.value, method = "fdr")
binomial_res_names <- rownames(binomial_res[binomial_res$p.adjust < 0.05 ,])
total <- exprs(corrected)
total <- total[rownames(total) %in% binomial_res_names ,]
target <- pData(corrected)
my_group <- as.numeric(as.factor(target$Treatment))
colSide <- brewer.pal(8, "Dark2")[my_group]
colMain <- colorRampPalette( c("green", "black", "red"), space = "rgb")(64)
heatmap(t(scale(t(total))), ColSideColors = colSide, col = colMain, labRow = NA)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
levels(iris$Species)
length(levels(iris$Species))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T)
runApp()
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T)
target
length(levels(as.factor(target$Treatment))) != 2
runApp()
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T)
counts <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt.txt", header = T, sep = "\t")
counts <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
length(levels(as.factor(target$Treatment))) != 2
View(counts)
library(tidyverse)
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T)
counts <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
counts <- counts %>% column_to_rownames(Accession) %>% select(-Proteins, -MW)
counts <- counts %>% column_to_rownames("Accession") %>% select(-Proteins, -MW)
counts <- counts %>% column_to_rownames("Accession") %>% select(-Proteins, -MW) %>% t()
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T)
counts <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
counts <- counts %>% column_to_rownames("Accession") %>% select(-Proteins, -MW) %>% t()
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T)
counts <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
counts <- counts %>% column_to_rownames("Accession") %>% select(-Proteins, -MW) %>% t() %>% mutate(Treatment = target$Treatment)
View(target)
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T)
counts <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
counts <- counts %>% column_to_rownames("Accession") %>% select(-Proteins, -MW) %>% t()
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T)
counts <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
counts <- counts %>% column_to_rownames("Accession") %>% select(-Proteins, -MW) %>% t() %>% as.data.frame() %>% mutate(Treatment = target$Treatment)
counts <- counts %>%
column_to_rownames("Accession") %>%
select(-Proteins, -MW) %>%
t() %>%
as.data.frame() %>%
mutate(Treatment = target$Treatment) %>%
group_by(Treatment) %>%
summarise(mean)
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T)
counts <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
counts <- counts %>%
column_to_rownames("Accession") %>%
select(-Proteins, -MW) %>%
t() %>%
as.data.frame() %>%
mutate(Treatment = target$Treatment) %>%
group_by(Treatment) %>%
summarise(mean)
counts <- counts %>%
column_to_rownames("Accession") %>%
select(-Proteins, -MW) %>%
t() %>%
as.data.frame() %>%
mutate(Treatment = target$Treatment) %>%
group_by(Treatment) %>%
summarise(mean = mean)
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T)
counts <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
counts <- counts %>%
column_to_rownames("Accession") %>%
select(-Proteins, -MW) %>%
t() %>%
as.data.frame() %>%
mutate(Treatment = target$Treatment) %>%
group_by(Treatment) %>%
summarise(mean = mean(.))
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T)
counts <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
counts <- counts %>%
column_to_rownames("Accession") %>%
select(-Proteins, -MW) %>%
t() %>%
as.data.frame() %>%
mutate(Treatment = target$Treatment)
aggregate(counts, list("Treatment"), mean())
aggregate(counts, list("Treatment"), mean
aggregate(counts, list("Treatment"), mean
)
aggregate(counts, list("Treatment"), mean)
aggregate(counts, by = list("Treatment"), FUN = mean)
aggregate(counts, by = counts$Treatment, FUN = mean)
aggregate(counts, by = list(counts$Treatment), FUN = mean)
aggregate(counts, by = list(counts$Treatment), FUN = mean) %>% View()
(125+138+147)/3
(228+242+247)/3
means <- data.frame(aggregate(counts, by = list(counts$Treatment), FUN = mean)) %>%
column_to_rownames("Group.1") %>%
data.frame(t())
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T)
counts <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
counts <- counts %>%
column_to_rownames("Accession") %>%
select(-Proteins, -MW) %>%
t() %>%
as.data.frame() %>%
mutate(Treatment = target$Treatment)
means <- data.frame(aggregate(counts, by = list(counts$Treatment), FUN = mean)) %>%
column_to_rownames("Group.1") %>%
t() %>%
as.data.frame()
View(means)
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T)
proteines <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
colnames(target) <- c("Sample", "Treatment", "Batch")
colnames(proteines)[2] <- "Accession"
target <- column_to_rownames(target, "Sample")
proteines <- column_to_rownames(proteines, "Accession")
proteines <- proteines[, colnames(proteines) %in% rownames(target)]
data <- MSnbase::MSnSet(exprs = as.matrix(proteines), pData = target)
corrected <- MSnbase::MSnSet(exprs = as.matrix(proteines), pData = target)
my_counts <- exprs(corrected)
View(my_counts)
my_counts <- exprs(corrected) %>%
t() %>%
as.data.frame() %>%
mutate(Treatment = target$Treatment)
means <- data.frame(aggregate(my_counts, by = list(my_counts$Treatment), FUN = mean)) %>%
column_to_rownames("Group.1") %>% t() %>% as.data.frame()
View(means)
means <- data.frame(aggregate(my_counts, by = list(my_counts$Treatment), FUN = mean)) %>%
column_to_rownames("Group.1") %>% t() %>% as.data.frame() %>% round(2)
alt_f <- "y~Treatment"
### Null and alternative model
null_f <- "y ~ 1"
### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Quasi-likelihood GLM
binomial_res <- msms.edgeR(corrected, alt_f, null_f, div = div, fnm = "Treatment")
colnames(means) <- paste0("Avg", colnames(means))
runApp()
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T)
proteines <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
proteines[is.na(proteines)] <- 33
proteines <- proteinesInput()
target <- targetInput()
colnames(target) <- c("Sample", "Treatment", "Batch")
colnames(proteines)[2] <- "Accession"
target <- column_to_rownames(target, "Sample")
proteines <- column_to_rownames(proteines, "Accession")
proteines <- proteines[, colnames(proteines) %in% rownames(target)]
corrected <- MSnbase::MSnSet(exprs = as.matrix(proteines), pData = target)
my_counts <- exprs(corrected) %>% t() %>% as.data.frame() %>% mutate(Treatment = target$Treatment)
means <- data.frame(aggregate(my_counts, by = list(my_counts$Treatment), FUN = mean)) %>%
column_to_rownames("Group.1") %>% t() %>% as.data.frame() %>% round(2)
target <- pData(corrected)
### Null and alternative model
null_f <- "y ~ 1"
colnames(means) <- paste0("Mean", colnames(means))
alt_f <- "y~Treatment"
### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Quasi-likelihood GLM
binomial_res <- msms.edgeR(corrected, alt_f, null_f, div = div, fnm = "Treatment")
binomial_res$p.adjust <- p.adjust(binomial_res$p.value, method = input$adjustment_method_binomial)
binomial_res$p.adjust <- p.adjust(binomial_res$p.value, method = "fdr")
binomial_resX <- bind_cols(means, binomial_res)
View(binomial_res)
binomial_resX <- cbind(means, binomial_res)
View(means)
means <- data.frame(aggregate(my_counts, by = list(my_counts$Treatment), FUN = mean)) %>%
column_to_rownames("Group.1") %>% t() %>% as.data.frame() %>% round(2) %>% filter(rownames(.) != "Treatment")
colnames(means) <- paste0("Mean", colnames(means))
View(means)
binomial_resX <- cbind(means, binomial_res)
View(binomial_resX)
runApp()
runApp()
log(147.61)/log(168.1)
log(168.1)/log(147.61)
log2(168.1)/log2(147.61)
log2(147.61)/log2(168.1)
log(147.61/168.1)
log(168.1/147.61)
log2(168.1/147.61)
log(168.1/147.61)
log2(168.1/147.61)
log2(168.1/147.61)
log2(grupo2/grupo1)
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T)
proteines <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
proteines[is.na(proteines)] <- 33
colnames(target) <- c("Sample", "Treatment", "Batch")
colnames(proteines)[2] <- "Accession"
target <- column_to_rownames(target, "Sample")
proteines <- column_to_rownames(proteines, "Accession")
proteines <- proteines[, colnames(proteines) %in% rownames(target)]
corrected <- MSnbase::MSnSet(exprs = as.matrix(proteines), pData = target)
my_counts <- exprs(corrected) %>% t() %>% as.data.frame() %>% mutate(Treatment = target$Treatment)
means <- data.frame(aggregate(my_counts, by = list(my_counts$Treatment), FUN = mean)) %>%
column_to_rownames("Group.1") %>% t() %>% as.data.frame() %>% round(2) %>% filter(rownames(.) != "Treatment")
colnames(means) <- paste0("Mean", colnames(means))
### Null and alternative model
null_f <- "y ~ 1"
alt_f <- "y~Treatment"
### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Quasi-likelihood GLM
binomial_res <- msms.edgeR(corrected, alt_f, null_f, div = div, fnm = "Treatment")
binomial_res$p.adjust <- p.adjust(binomial_res$p.value, method = input$adjustment_method_binomial)
binomial_res$p.adjust <- p.adjust(binomial_res$p.value, method = "fdr")
binomial_res <- cbind(means, binomial_res) %>% rename(log2FC = LogFC)
View(binomial_res)
168.1/147.61
log2(168.1)/log2(147.61)
runApp()
runApp()
runApp()
(33+53+67)/3
(263+124+146)/3
(33+53+67+263+124+146)/6
(51+177.6667)/2
target <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-samples.txt", header = T)
proteines <- read.table("/Users/pol/Dropbox/JosepVillanueva/231eribulin-counts.txt", header = T, sep = "\t")
proteines[is.na(proteines)] <- 33
colnames(target) <- c("Sample", "Treatment", "Batch")
colnames(proteines)[2] <- "Accession"
target <- column_to_rownames(target, "Sample")
proteines <- column_to_rownames(proteines, "Accession")
proteines <- proteines[, colnames(proteines) %in% rownames(target)]
corrected <- MSnbase::MSnSet(exprs = as.matrix(proteines), pData = target)
my_counts <- exprs(corrected) %>% t() %>% as.data.frame() %>% mutate(Treatment = target$Treatment)
means <- data.frame(aggregate(my_counts, by = list(my_counts$Treatment), FUN = mean)) %>%
column_to_rownames("Group.1") %>% t() %>% as.data.frame() %>% round(2) %>% filter(rownames(.) != "Treatment")
colnames(means) <- paste0("Mean", colnames(means))
### Null and alternative model
null_f <- "y ~ 1"
alt_f <- "y~Treatment"
### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Quasi-likelihood GLM
binomial_res <- msms.edgeR(corrected, alt_f, null_f, div = div, fnm = "Treatment")
binomial_res$p.adjust <- p.adjust(binomial_res$p.value, method = input$adjustment_method_binomial)
binomial_res$p.adjust <- p.adjust(binomial_res$p.value, method = "fdr")
binomial_res <- cbind(means, binomial_res) %>% rename(log2FC = LogFC) %>% mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3))
df <- binomial_res
df <- data.frame(pvalue = df$p.value, FC = round(df$log2FC, 2), names = names, counts = mean(df[,1], df[,2]))
df <- data.frame(pvalue = df$p.value, FC = round(df$log2FC, 2), names = names, counts = mean(df[,1:2]))
df <- df %>% rowwise() %>% mutate(counts = vars(starts_with("Mean")))
View(df)
df <- binomial_res
dfX <- df %>% rowwise() %>% mutate(counts = mean(vars(starts_with("Mean"))))
View(dfX)
dfX <- df %>% rowwise() %>% mutate(counts = ~ mean(vars(starts_with("Mean"))))
dfX <- df %>% mutate(counts = rowMeans(select(., starts_with("Mean")), na.rm = TRUE))
(136.67+239)/2
(100+51.67)/2
df <- df %>% mutate(counts = rowMeans(select(., starts_with("Mean")), na.rm = TRUE))
df <- data.frame(pvalue = df$p.value, FC = round(df$log2FC, 2), names = names, counts = round(df$counts, 2))
df <- binomial_res
df <- df %>% mutate(counts = rowMeans(select(., starts_with("Mean")), na.rm = TRUE))
df <- data.frame(pvalue = df$p.value, FC = round(df$log2FC, 2), names = names, counts = round(df$counts, 2))
df$p.value
round(df$log2FC, 2)
names <- rownames(df)
df <- data.frame(pvalue = df$p.value, FC = round(df$log2FC, 2), names = names, counts = round(df$counts, 2))
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = counts, labels = names)) +
geom_point(size = 1.75, alpha = 0.8) +
xlim(c(-(5), 5)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p") +
geom_vline(xintercept = -log2(1.5), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(1.5), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(input$pval_cutoff3), colour = "black", linetype = "dashed") +
theme_bw())
ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = counts, labels = names)) +
geom_point(size = 1.75, alpha = 0.8) +
xlim(c(-(5), 5)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p") +
geom_vline(xintercept = -log2(1.5), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(1.5), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(0.05), colour = "black", linetype = "dashed") +
theme_bw())
runApp()
runApp()
