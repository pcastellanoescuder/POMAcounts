}
yv <- rep(i, ncol(x.scaled)) + x.scaled[i, ] - 0.5
yv <- rev(c(yv[1], yv))
xv <- length(yv):1 - 0.5
lines(x = xv, y = yv, lwd = 1, col = tracecol, type = "s")
}
}
if (!missing(cellnote))
text(x = c(row(cellnote)), y = c(col(cellnote)), labels = c(cellnote),
col = notecol, cex = notecex)
par(mar = c(margins[1], 0, 0, 0))
if (dendrogram %in% c("both", "row")) {
plot(ddr, horiz = TRUE, axes = FALSE, yaxs = "i", leaflab = "none")
}
else plot.new()
par(mar = c(0, 0, if (!is.null(main)) 5 else 0, margins[2]))
if (dendrogram %in% c("both", "column")) {
plot(ddc, axes = FALSE, xaxs = "i", leaflab = "none")
}
else plot.new()
if (!is.null(main))
title(main, cex.main = 1.5 * op[["cex.main"]])
if (key) {
par(mar = c(5, 4, 2, 1), cex = 0.75)
tmpbreaks <- breaks
if (symkey) {
max.raw <- max(abs(c(x, breaks)), na.rm = TRUE)
min.raw <- -max.raw
tmpbreaks[1] <- -max(abs(x), na.rm = TRUE)
tmpbreaks[length(tmpbreaks)] <- max(abs(x), na.rm = TRUE)
}
else {
min.raw <- min(x, na.rm = TRUE)
max.raw <- max(x, na.rm = TRUE)
}
z <- seq(min.raw, max.raw, length = length(col))
image(z = matrix(z, ncol = 1), col = col, breaks = tmpbreaks,
xaxt = "n", yaxt = "n")
par(usr = c(0, 1, 0, 1))
lv <- pretty(breaks)
xv <- scale01(as.numeric(lv), min.raw, max.raw)
axis(1, at = xv, labels = lv)
if (scale == "row")
mtext(side = 1, "Row Z-Score", line = 2)
else if (scale == "column")
mtext(side = 1, "Column Z-Score", line = 2)
else mtext(side = 1, "Value", line = 2)
if (density.info == "density") {
dens <- density(x, adjust = densadj, na.rm = TRUE)
omit <- dens$x < min(breaks) | dens$x > max(breaks)
dens$x <- dens$x[-omit]
dens$y <- dens$y[-omit]
dens$x <- scale01(dens$x, min.raw, max.raw)
lines(dens$x, dens$y/max(dens$y) * 0.95, col = denscol,
lwd = 1)
axis(2, at = pretty(dens$y)/max(dens$y) * 0.95, pretty(dens$y))
title("Color Key\nand Density Plot")
par(cex = 0.5)
mtext(side = 2, "Density", line = 2)
}
else if (density.info == "histogram") {
h <- hist(x, plot = FALSE, breaks = breaks)
hx <- scale01(breaks, min.raw, max.raw)
hy <- c(h$counts, h$counts[length(h$counts)])
lines(hx, hy/max(hy) * 0.95, lwd = 1, type = "s",
col = denscol)
axis(2, at = pretty(hy)/max(hy) * 0.95, pretty(hy))
title("Color Key\nand Histogram")
par(cex = 0.5)
mtext(side = 2, "Count", line = 2)
}
else title("Color Key")
}
else plot.new()
retval$colorTable <- data.frame(low = retval$breaks[-length(retval$breaks)],
high = retval$breaks[-1], color = retval$col)
invisible(retval)
}
exp.heatmap <- function(e,fnm,h,tit)
{
cls <- brewer.pal(8,"Dark2")[as.integer(as.factor(pData(e)[,fnm]))]
###  Filter dataset
data <- exprs(e)
data <- data[filter.flags(exprs(e)),]
###  Expression to write data on the heatmap
add.expr <- expression(
{ par(mar = c(margins[1], 0, 0, margins[2]))
for(j in 1:ncol(SpC.expr))
text(j,1:nrow(SpC.expr),labels=round(SpC.expr[rowInd,colInd[j]],1),
cex=0.6,font=2,col=tracecol)
})
gtit <- paste("Heatmap_",tit,sep="")
hm <- heatmap.2jg(t(scale(t(data))),col=greenred(255),trace="none",
key=FALSE,cexRow=0.6,cexCol=0.7,margins=c(5,6),dendrogram="both",
add.expr=add.expr,lhei=c(2,h-3),SpC.expr=data,
ColSideColors=cls)
}
exp.heatmap(new_corrected, "Treatment", h = h, tit = "")
heatmap(exprs(new_corrected))
dev.off
dev.off()
dev.off()
dev.off()
exp.heatmap(new_corrected, "Treatment", h = h, tit = "")
dev.off()
h <- nrow(exprs(new_corrected))/(2.54/0.35)
pdf(file = file, width = 7, height = h)
pdf(file = "hello", width = 7, height = h)
exp.heatmap(new_corrected, "Treatment", h = h, tit = "")
dev.off()
dev.off()
shiny::runApp()
proteines <- Biobase::exprs(msms.dataset) %>%
as.data.frame() %>%
rownames_to_column("feature") %>%
mutate(gene = "GN=NA ") %>%
dplyr::select(gene, feature, everything())
target <- Biobase::pData(msms.dataset) %>%
rownames_to_column("ID")
colnames(target) <- c("Sample", "Treatment", "Batch")
colnames(proteines)[2] <- "Accession"
colnames(proteines)[1] <- "gene_name"
proteines <- proteines %>%
mutate(Accession = paste0(gene_name, ";", Accession))
target <- column_to_rownames(target, "Sample")
proteines <- column_to_rownames(proteines, "Accession")
proteines <- proteines[, colnames(proteines) %in% rownames(target)]
data <- MSnbase::MSnSet(exprs = as.matrix(proteines), pData = target)
corrected <-data
target <- pData(corrected)
my_counts <- exprs(corrected) %>% t() %>% as.data.frame() %>% mutate(Treatment = target$Treatment)
means <- data.frame(aggregate(my_counts, by = list(my_counts$Treatment), FUN = mean)) %>%
column_to_rownames("Group.1") %>% t() %>% as.data.frame() %>% round(2) %>% filter(rownames(.) != "Treatment")
colnames(means) <- paste0("Mean", colnames(means))
### Null and alternative model
null_f <- "y ~ 1"
alt_f <- paste0("y ~ ", input$h1_1)
alt_f <- "y ~ Treatment"
### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Poisson GLM
pois_res <- msms.glm.pois(corrected, alt_f, null_f, div = div)
pois_res$p.adjust <- p.adjust(pois_res$p.value, method = input$adjustment_method_poisson)
my_names <- rownames(pois_res)
pois_res <- cbind(means, pois_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
D = round(D, 3),
names = my_names,
GeneName = stringr::str_remove(names, pattern = "^.*GN="),
GeneName = stringr::str_remove(GeneName, pattern = "(?s) .*"),
Protein = stringr::str_remove(names, pattern = "^.*;")) %>%
remove_rownames() %>%
column_to_rownames("Protein") %>%
select(GeneName, everything()) %>%
select(-names)
df <- pois_res
pois_res
pois_res$p.adjust <- p.adjust(pois_res$p.value, method = "fdr")
my_names <- rownames(pois_res)
pois_res <- cbind(means, pois_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
D = round(D, 3),
names = my_names,
GeneName = stringr::str_remove(names, pattern = "^.*GN="),
GeneName = stringr::str_remove(GeneName, pattern = "(?s) .*"),
Protein = stringr::str_remove(names, pattern = "^.*;")) %>%
remove_rownames() %>%
column_to_rownames("Protein") %>%
select(GeneName, everything()) %>%
select(-names)
### Poisson GLM
pois_res <- msms.glm.pois(corrected, alt_f, null_f, div = div)
pois_res$p.adjust <- p.adjust(pois_res$p.value, method = "fdr")
my_names <- rownames(pois_res)
pois_res <- cbind(means, pois_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
D = round(D, 3),
names = my_names,
GeneName = stringr::str_remove(names, pattern = "^.*GN="),
GeneName = stringr::str_remove(GeneName, pattern = "(?s) .*"),
Protein = stringr::str_remove(names, pattern = "^.*;")) %>%
remove_rownames() %>%
column_to_rownames("Protein") %>%
select(GeneName, everything()) %>%
select(-names)
df <- pois_res
names <- rownames(df) %>%
stringr::str_remove(pattern = "^.*;")
df <- df %>% mutate(counts = rowMeans(select(., starts_with("Mean")), na.rm = TRUE))
df <- data.frame(pvalue = df$p.value, FC = round(df$log2FC, 2), names = names, counts = round(df$counts, 2))
log2FC1 <- 2^(1.5)
df <- mutate(df, threshold = as.factor(ifelse(df$pvalue >= input$pval_cutoff1,
yes = "none",
no = ifelse(df$FC < log2(log2FC1),
yes = ifelse(df$FC < -log2(log2FC1),
yes = "Down-regulated",
no = "none"),
no = "Up-regulated"))))
df <- mutate(df, threshold = as.factor(ifelse(df$pvalue >= 0.05,
yes = "none",
no = ifelse(df$FC < log2(log2FC1),
yes = ifelse(df$FC < -log2(log2FC1),
yes = "Down-regulated",
no = "none"),
no = "Up-regulated"))))
p <- ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold, labels = names)) +
{if(!input$show_counts1)geom_point(size = 1.75, alpha = 0.8)} +
{if(input$show_counts1)geom_point(aes(size = counts), alpha = 0.8)} +
xlim(c(-(input$xlim1), input$xlim1)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p") +
geom_vline(xintercept = -log2(log2FC1), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC1), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(input$pval_cutoff1), colour = "black", linetype = "dashed") +
theme(legend.position = "none") +
theme_bw() +
labs(color = "") +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
p <- ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold, labels = names)) +
{if(!input$show_counts1)geom_point(size = 1.75, alpha = 0.8)} +
{if(input$show_counts1)geom_point(aes(size = counts), alpha = 0.8)} +
xlim(c(-(input$xlim1), input$xlim1)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p") +
geom_vline(xintercept = -log2(log2FC1), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC1), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(input$pval_cutoff1), colour = "black", linetype = "dashed") +
theme(legend.position = "none") +
theme_bw() +
labs(color = "") +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
p <- ggplotly(ggplot(data = df, aes(x = FC, y = -log10(pvalue), color = threshold, labels = names)) +
geom_point(aes(size = counts), alpha = 0.8) +
xlim(c(-5, 5)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p") +
geom_vline(xintercept = -log2(log2FC1), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(log2FC1), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(0.05), colour = "black", linetype = "dashed") +
theme(legend.position = "none") +
theme_bw() +
labs(color = "") +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363")))
p
p %>% add_annotations(x = df$FC,
y = -log10(df$pvalue),
text = df$names,
xref = "x",
yref = "y",
showarrow = TRUE,
arrowhead = 4,
arrowsize = .5,
ax = 20,
ay = -40)
p %>% add_annotations(x = df$FC[df$threshold != "none"],
y = -log10(df$pvalue[df$threshold != "none"]),
text = df$names[df$threshold != "none"],
xref = "x",
yref = "y",
showarrow = F,
arrowhead = 4,
arrowsize = .5,
ax = 20,
ay = -40)
p %>% add_annotations(x = df$FC[df$threshold != "none"],
y = -log10(df$pvalue[df$threshold != "none"]),
text = df$names[df$threshold != "none"],
xref = "x",
yref = "y",
showarrow = F,
arrowhead = 4,
arrowsize = .5,
ax = 20,
ay = -40)
runApp()
runApp()
runApp()
data(msms.dataset)
proteines <- Biobase::exprs(msms.dataset) %>%
as.data.frame() %>%
rownames_to_column("feature") %>%
mutate(gene = "GN=NA ") %>%
dplyr::select(gene, feature, everything())
install.packages(c("gplots", "gtools", "shinyBS", "shinydashboard", "shinyhelper", "tidyverse"))
library(shiny)
library(DT)
library(shinydashboard)
library(tidyverse)
library(RColorBrewer)
library(mixOmics)
library(msmsEDA)
library(dashboardthemes)
library(shinyBS)
library(Biobase)
library(MSnbase)
library(reshape2)
library(gplots)
library(ggrepel)
library(gtools)
library(msmsTests)
library(plotly)
library(shinyhelper)
proteines <- Biobase::exprs(msms.dataset) %>%
as.data.frame() %>%
rownames_to_column("feature") %>%
mutate(gene = "GN=NA ") %>%
dplyr::select(gene, feature, everything())
data(msms.dataset)
library(msmsEDA)
BiocManager::install(c("msmsEDA", "msmsTests"))
library(shiny)
library(DT)
library(shinydashboard)
library(tidyverse)
library(RColorBrewer)
library(mixOmics)
library(msmsEDA)
library(dashboardthemes)
library(shinyBS)
library(Biobase)
library(MSnbase)
library(reshape2)
library(gplots)
library(ggrepel)
library(gtools)
library(msmsTests)
library(plotly)
library(shinyhelper)
install_github("nik01010/dashboardthemes")
devtools::install_github("nik01010/dashboardthemes")
data(msms.dataset)
proteines <- Biobase::exprs(msms.dataset) %>%
as.data.frame() %>%
rownames_to_column("feature") %>%
mutate(gene = "GN=NA ") %>%
dplyr::select(gene, feature, everything())
data(msms.dataset)
target <- Biobase::pData(msms.dataset) %>%
rownames_to_column("ID")
colnames(target) <- c("Sample", "Treatment", "Batch")
colnames(proteines)[2] <- "Accession"
colnames(proteines)[1] <- "gene_name"
proteines <- proteines %>%
mutate(Accession = paste0(gene_name, ";", Accession))
target <- column_to_rownames(target, "Sample")
proteines <- column_to_rownames(proteines, "Accession")
proteines <- proteines[, colnames(proteines) %in% rownames(target)]
data <- MSnbase::MSnSet(exprs = as.matrix(proteines), pData = target)
raw <- pp.msms.data(data)
counts <- Biobase::exprs(raw)
tcnts <- apply(counts, 2, sum)
medt <- median(tcnts)
div <- data.frame(median = tcnts/medt)
div$sample <- rownames(div)
div$Treatment <- target$Treatment
counts <- Biobase::exprs(raw)
tspc <- apply(counts, 2, sum)
div <- tspc/median(tspc)
norm <- norm.counts(raw, div)
counts <- Biobase::exprs(norm)
tcnts <- apply(counts, 2, sum)
medt <- median(tcnts)
div <- data.frame(median = tcnts/medt)
div$sample <- rownames(div)
div$Treatment <- target$Treatment
target <- pData(norm)
neutralized <- batch.neutralize(exprs(norm), target$Batch, half = TRUE, sqrt.trans = TRUE)
corrected <- MSnSet(exprs = as.matrix(neutralized), pData = pData(norm))
my_counts <- exprs(corrected) %>% t() %>% as.data.frame() %>% mutate(Treatment = target$Treatment)
means <- data.frame(aggregate(my_counts, by = list(my_counts$Treatment), FUN = mean)) %>%
column_to_rownames("Group.1") %>% t() %>% as.data.frame() %>% round(2) %>% filter(rownames(.) != "Treatment")
colnames(means) <- paste0("Mean", colnames(means))
### Null and alternative model
null_f <- "y ~ 1"
alt_f <- paste0("y ~ ", input$h1_3)
alt_f <-"y ~ Treatment"
### Normalizing condition
div <- apply(exprs(corrected), 2, sum)
### Quasi-likelihood GLM
binomial_res <- msms.edgeR(corrected, alt_f, null_f, div = div, fnm = "Treatment")
binomial_res$p.adjust <- p.adjust(binomial_res$p.value, method = input$adjustment_method_binomial)
binomial_res$p.adjust <- p.adjust(binomial_res$p.value, method = "fdr")
my_names <- rownames(binomial_res)
binomial_res <- cbind(means, binomial_res) %>%
rename(log2FC = LogFC) %>%
mutate(log2FC = round(log2FC, 2),
LR = round(LR, 3),
names = my_names,
GeneName = stringr::str_remove(names, pattern = "^.*GN="),
GeneName = stringr::str_remove(GeneName, pattern = "(?s) .*"),
Protein = stringr::str_remove(names, pattern = "^.*;")) %>%
remove_rownames() %>%
column_to_rownames("Protein") %>%
select(GeneName, everything()) %>%
select(-names)
binomial_res_names <- rownames(binomial_res[binomial_res$p.adjust < input$pval_cutoff3 ,])
binomial_res_names <- rownames(binomial_res[binomial_res$p.adjust < 0.05 ,])
binomial_res_names
total <- exprs(corrected)
rownames(total) <- rownames(total) %>%
stringr::str_remove(pattern = "^.*;")
total <- total[rownames(total) %in% binomial_res_names ,]
target <- pData(corrected)
total <- exprs(corrected)
rownames(total) <- rownames(total) %>%
stringr::str_remove(pattern = "^.*;")
total <- total[rownames(total) %in% binomial_res_names ,]
target <- pData(corrected)
my_group <- as.numeric(as.factor(target$Treatment))
colSide <- brewer.pal(8, "Dark2")[my_group]
colMain <- colorRampPalette( c("green", "black", "red"), space = "rgb")(64)
heatmap(t(scale(t(total))), ColSideColors = colSide, col = colMain, labRow = NA)
target[,1]
ha <- ComplexHeatmap::HeatmapAnnotation(df = data.frame(Group = target[,1]))
ComplexHeatmap::Heatmap(total, name = "Value", top_annotation = ha,
show_row_names = T, show_column_names = T)
heatmap(t(scale(t(total))), ColSideColors = colSide, col = colMain, labRow = NA)
ComplexHeatmap::Heatmap(total, name = "Value", top_annotation = ha,
show_row_names = T, show_column_names = TRUE)
?ComplexHeatmap::Heatmap
ComplexHeatmap::Heatmap(scale(total), name = "Value", top_annotation = ha,
show_row_names = T, show_column_names = TRUE)
ComplexHeatmap::Heatmap(t(scale(t(total))), name = "Value", top_annotation = ha,
show_row_names = T, show_column_names = TRUE)
f1 <- colorRamp2(seq(min(total), max(total), length = 3), c("green", "black", "red"))
f1 <- ComplexHeatmap::colorRamp2(seq(min(total), max(total), length = 3), c("green", "black", "red"))
ComplexHeatmap::Heatmap(t(scale(t(total))), name = "Value", top_annotation = ha,
show_row_names = T, show_column_names = TRUE, col = c("green", "black", "red"))
ComplexHeatmap::Heatmap(t(scale(t(total))), name = "Value", top_annotation = ha,
show_row_names = T, show_column_names = TRUE,
col = c("green", "black", "red"), show_heatmap_legend = FALSE)
ComplexHeatmap::Heatmap(t(scale(t(total))), name = "Value", top_annotation = ha,
show_row_names = T, show_column_names = TRUE,
col = c("green", "black", "red"), show_heatmap_legend = FALSE,
show_column_dend = FALSE)
ComplexHeatmap::Heatmap(t(scale(t(total))), name = "Value", top_annotation = ha,
show_row_names = T, show_column_names = TRUE,
col = c("green", "black", "red"), show_heatmap_legend = FALSE)
?HeatmapAnnotation
ha <- ComplexHeatmap::HeatmapAnnotation(df = data.frame(Group = target[,1]), show_legend = FALSE)
ComplexHeatmap::Heatmap(t(scale(t(total))), name = "Value", top_annotation = ha,
show_row_names = T, show_column_names = TRUE,
col = c("green", "black", "red"), show_heatmap_legend = FALSE)
my_group <- as.numeric(as.factor(target$Treatment))
colSide <- brewer.pal(8, "Dark2")[my_group]
ha <- ComplexHeatmap::HeatmapAnnotation(df = data.frame(Group = target[,1]), show_legend = FALSE,
col = colSide)
ha <- ComplexHeatmap::HeatmapAnnotation(df = data.frame(Group = target[,1]), show_legend = FALSE,
col = list(colSide))
colSide
brewer.pal(8, "Dark2")
group_col <- ComplexHeatmap::SingleAnnotation(name = "group_col", label = colSide)
group_col <- ComplexHeatmap::SingleAnnotation(name = "group_col", value = colSide)
ha <- ComplexHeatmap::HeatmapAnnotation(df = data.frame(Group = target[,1]), show_legend = FALSE,
col = group_col)
group_col
ha <- ComplexHeatmap::HeatmapAnnotation(df = data.frame(Group = target[,1]), show_legend = FALSE,
col = as.list(colSide))
as.list(colSide)
colSide <- list(brewer.pal(8, "Dark2")[my_group])
names(colSide) <- target$Treatment
target$Treatment
View(colSide)
names(colSide) <- "group_col"
ha <- ComplexHeatmap::HeatmapAnnotation(df = data.frame(Group = target[,1]), show_legend = FALSE,
col = as.list(colSide))
ha <- ComplexHeatmap::HeatmapAnnotation(df = data.frame(Group = target[,1]), show_legend = FALSE,
col = colSide)
ComplexHeatmap::Heatmap(t(scale(t(total))), name = "Value", top_annotation = ha,
show_row_names = T, show_column_names = TRUE,
col = c("green", "black", "red"), show_heatmap_legend = FALSE)
my_group <- as.numeric(as.factor(target$Treatment))
colSide <- brewer.pal(8, "Dark2")[my_group]
ha <- ComplexHeatmap::HeatmapAnnotation(df = data.frame(Group = target[,1]), show_legend = FALSE,
col = list(gn = colSide))
ComplexHeatmap::Heatmap(t(scale(t(total))), name = "Value", top_annotation = ha,
show_row_names = T, show_column_names = TRUE,
col = c("green", "black", "red"), show_heatmap_legend = FALSE)
circlize::colorRamp2()
?=circlize::colorRamp2()
?circlize::colorRamp2()
colSide
colSide <- brewer.pal(8, "Dark2")[my_group]
names(colSide) <- target$Treatment
ha <- ComplexHeatmap::HeatmapAnnotation(df = data.frame(Group = target[,1]), show_legend = FALSE,
col = list(gn = colSide))
ComplexHeatmap::Heatmap(t(scale(t(total))), name = "Value", top_annotation = ha,
show_row_names = T, show_column_names = TRUE,
col = c("green", "black", "red"), show_heatmap_legend = FALSE)
my_group <- as.numeric(as.factor(target$Treatment))
colSide <- brewer.pal(8, "Dark2")[my_group]
names(colSide) <- target$Treatment
ha <- ComplexHeatmap::HeatmapAnnotation(df = data.frame(Group = target[,1]), show_legend = FALSE,
col = list(gn = colSide))
ComplexHeatmap::Heatmap(t(scale(t(total))), name = "Value", top_annotation = ha,
show_row_names = T, show_column_names = TRUE,
col = c("green", "black", "red"), show_heatmap_legend = FALSE)
ha <- ComplexHeatmap::HeatmapAnnotation(df = data.frame(Group = target[,1]), show_legend = FALSE,
col = list(colSide))
total <- total[rownames(total) %in% binomial_res_names ,]
target <- pData(corrected)
ha <- ComplexHeatmap::HeatmapAnnotation(df = data.frame(Group = target[,1]), show_legend = FALSE)
ComplexHeatmap::Heatmap(t(scale(t(total))), name = "Value", top_annotation = ha,
show_row_names = T, show_column_names = TRUE,
col = c("green", "black", "red"), show_heatmap_legend = FALSE)
runApp()
